{"version":3,"sources":["restaurant_info.js","addReviewModal.js"],"names":["restaurant","reviews","outboxReviews","newMap","matchesMediaQuery","mediaQuery","document","event","previouslyConnected","navigator","onLine","initMap","window","matchMedia","matches","updateRestaurantContainerAria","serviceWorker","addEventListener","_event$data","caches","type","requestId","review","error","cleanMapboxTilesCache","setInterval","enqueueToast","concat","data","showConnectionStatus","updateReviewHTML","getElementById","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","fetchRestaurantFromURL","MAPBOX_API_KEY","attribution","addTo","mapMarkerForRestaurant","id","fillBreadcrumb","DBHelper","nextMatchesMediaQuery","previouslyFocusedElement","accessibleRestaurantContainer","setAttribute","restaurantContainer","callback","fetchRestaurantById","classList","remove","add","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","sourceLarge","createElement","media","srcset","imageUrlForRestaurant","size","wide","fetchReviews","sourceMedium","picture","appendChild","sourceSmall","image","alt","cuisine_type","addReviewButton","removeAttribute","operating_hours","className","call","fillMarkAsFavouriteHTML","cuisine","operatingHours","accessibleRestaurantCuisine","key","addReviewOverlayHeading","row","day","fillRestaurantHoursHTML","time","markRestaurantAsFavourite","button","icon","querySelector","hours","unmarkRestaurantAsFavourite","isFavourite","text","favouriteButton","fillReviewsHTML","getOutboxReviews","fillSendingReviewsHTML","noReviews","fetchReviewsByRestaurantId","ul","insertBefore","createReviewHTML","firstChild","outboxReview","_objectWithoutProperties","request_id","sending","article","headerSpan","container","date","loadingText","forEach","updatedAt","contentSpan","rating","comments","dateText","formatDate","reviewElement","errorText","breadcrumb","li","url","location","href","replace","results","exec","decodeURIComponent","setMarkAsFavouriteFetchingState","Date","spinner","removeMarkAsFavouriteFetchingState","toggleRestaurantAsFavourite","successMessage","errorMessage","stringToBoolean","is_favorite","getUrlParam","newIsFavourite","failedUpdateCallback","setRestaurantFavouriteStatus","restaurantId","updatedRestaurant","openModal","activeElement","overlay","interactiveElements","querySelectorAll","body","trapTabKey","setTimeout","focus","closeModal","clearFormErrors","removeEventListener","firstElement","lastElement","shiftKey","target","preventDefault","setNameInputError","nameInput","nameInputError","clearNameInputError","setRatingInputError","ratingInput","ratingInputError","clearRatingInputError","setCommentInputError","commentInput","commentInputError","clearCommentInputError","errorFunctions","setError","clearError","validateInput","value","inputValue","input","cloneNode","Number","parseInt","requestAnimationFrame","validateAllInputs","invalidInputs","push","handleRangeChange","handleInputKeyUp","handleInputBlur","getFormInputValues","values","clearForm","handleAddReviewSubmit","_validateAllInputs","formError","join","_getFormInputValues","controller","now","newReview","restaurant_id","postMessage","submitButton","addReview","log","handleFormSubmit"],"mappings":"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","file":"../src/js/restaurant_info.js","sourcesContent":["let restaurant;\nlet reviews;\nlet outboxReviews;\nlet newMap;\nlet matchesMediaQuery = true;\nconst mediaQuery = '(min-width: 800px)';\nlet previouslyConnected;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  previouslyConnected = navigator.onLine;\n\n  initMap();\n  if (window.matchMedia) {\n    matchesMediaQuery = window.matchMedia(mediaQuery).matches;\n  }\n  updateRestaurantContainerAria(); // set initial aria values\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n\n  if (navigator.serviceWorker) {\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      const {\n        type, requestId, review, error,\n      } = event.data;\n      if (type === 'update-review') {\n        if (error) {\n          enqueueToast('An error occurred while submitting your review', 'error');\n          updateReviewHTML(true, requestId);\n        } else {\n          enqueueToast(`${review.name}'s review has been saved`, 'success');\n          updateReviewHTML(false, requestId, review);\n        }\n      }\n    });\n  }\n\n  if ('onLine' in navigator) {\n    window.addEventListener('online', showConnectionStatus);\n    window.addEventListener('offline', showConnectionStatus);\n    showConnectionStatus();\n  }\n\n  const toast = document.getElementById('toast');\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false,\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: MAPBOX_API_KEY,\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n          + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n          + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets',\n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n};\n\n/**\n* Update aria-hidden values of the visible and accessible restaurant containers\n*/\nwindow.addEventListener('resize', () => {\n  if (window.matchMedia) {\n    const nextMatchesMediaQuery = window.matchMedia(mediaQuery).matches;\n    if (nextMatchesMediaQuery !== matchesMediaQuery) { // only update aria when layout changes\n      matchesMediaQuery = nextMatchesMediaQuery;\n      updateRestaurantContainerAria();\n    }\n  }\n});\n\n/**\n* Set aria-hidden values for visible and regular restaurant containers\n* Accessible restaurant container is off screen\n* It is required to maintain screen reading order when the layout shifts\n*/\nconst updateRestaurantContainerAria = () => {\n  const restaurantContainer = document.getElementById('restaurant-container');\n  const accessibleRestaurantContainer = document.getElementById('accessible-restaurant-container');\n  if (matchesMediaQuery) { // larger layout, screen reading order off\n    restaurantContainer.setAttribute('aria-hidden', 'true');\n    accessibleRestaurantContainer.setAttribute('aria-hidden', 'false');\n  } else { // use regular reading order\n    restaurantContainer.setAttribute('aria-hidden', 'false');\n    accessibleRestaurantContainer.setAttribute('aria-hidden', 'true');\n  }\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getUrlParam('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL';\n    callback(error, null);\n    document.getElementById('main-spinner').classList.remove('show');\n    document.getElementById('main-error').classList.add('show');\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        document.getElementById('main-spinner').classList.remove('show');\n        document.getElementById('main-error').classList.add('show');\n        return;\n      }\n      fetchReviews(id);\n      fillRestaurantHTML();\n      document.getElementById('main-spinner').classList.remove('show');\n      document.getElementById('wrap-main-content').classList.remove('hide');\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML += restaurant.address;\n\n  const picture = document.getElementById('restaurant-picture');\n\n  const sourceLarge = document.createElement('source');\n  sourceLarge.media = '(min-width: 800px)';\n  sourceLarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'large', wide: true });\n  sourceLarge.type = 'image/jpeg';\n  picture.appendChild(sourceLarge);\n\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 600px)';\n  sourceMedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' });\n  sourceMedium.type = 'image/jpeg';\n  picture.appendChild(sourceMedium);\n\n  const sourceSmall = document.createElement('source');\n  sourceSmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' });\n  sourceSmall.type = 'image/jpeg';\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  // set default size in case picture element is not supported\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.alt;\n  picture.appendChild(image);\n\n  const accessibleRestaurantImage = document.getElementById('accessible-restaurant-img');\n  accessibleRestaurantImage.setAttribute('aria-label', restaurant.alt);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = `Cuisine: ${restaurant.cuisine_type}`;\n\n  const accessibleRestaurantCuisine = document.getElementById('accessible-restaurant-cuisine');\n  accessibleRestaurantCuisine.innerHTML = `Cuisine: ${restaurant.cuisine_type}`;\n\n  const addReviewButton = document.getElementById('add-review-button');\n  addReviewButton.setAttribute('aria-label', `Add a review for ${restaurant.name}`);\n  addReviewButton.removeAttribute('disabled');\n\n  const addReviewOverlayHeading = document.getElementById('add-review-overlay-heading');\n  addReviewOverlayHeading.innerHTML = `Add review for ${restaurant.name}`;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  if (Object.hasOwnProperty.call(restaurant, 'is_favorite')) {\n    fillMarkAsFavouriteHTML();\n  }\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (const key in operatingHours) {\n    if (Object.prototype.hasOwnProperty.call(operatingHours, key)) {\n      const row = document.createElement('tr');\n\n      const day = document.createElement('td');\n      day.innerHTML = key;\n      row.appendChild(day);\n\n      const time = document.createElement('td');\n      time.innerHTML = operatingHours[key];\n      row.appendChild(time);\n\n      hours.appendChild(row);\n    }\n  }\n};\n\nconst markRestaurantAsFavourite = (button) => {\n  const icon = button.querySelector('i');\n  const text = button.querySelector('span');\n  text.innerHTML = 'Unmark restaurant as favourite';\n  icon.classList.add('fas', 'marked');\n  icon.classList.remove('far', 'unmarked');\n  icon.setAttribute('aria-label', 'Restaurant is currently marked as favourite');\n};\n\nconst unmarkRestaurantAsFavourite = (button) => {\n  const icon = button.querySelector('i');\n  const text = button.querySelector('span');\n  text.innerHTML = 'Mark restaurant as favourite';\n  icon.classList.add('far', 'unmarked');\n  icon.classList.remove('fas', 'marked');\n  icon.setAttribute('aria-label', 'Restaurant is not currently marked as favourite');\n};\n\n/**\n * Set state and text for mark as favourite button.\n */\nconst fillMarkAsFavouriteHTML = (isFavourite = self.restaurant.is_favorite) => {\n  const favouriteButton = document.getElementById('mark-as-favourite');\n  if (stringToBoolean(isFavourite)) {\n    markRestaurantAsFavourite(favouriteButton);\n  } else {\n    unmarkRestaurantAsFavourite(favouriteButton);\n  }\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchReviews = (id) => {\n  DBHelper.fetchReviewsByRestaurantId(id, (error, reviews) => {\n    self.reviews = reviews;\n    if (!reviews) {\n      console.error(error);\n      return;\n    }\n    fillReviewsHTML();\n    DBHelper.getOutboxReviews(id, (error, outboxReviews) => {\n      if (error) {\n        console.log(error);\n      } else {\n        self.outboxReviews = outboxReviews;\n        fillSendingReviewsHTML();\n      }\n    });\n  });\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.reviews) => {\n  if (!reviews || reviews.length === 0) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach((review) => {\n    ul.insertBefore(createReviewHTML(review), ul.firstChild);\n  });\n};\n\nconst fillSendingReviewsHTML = (outboxReviews = self.outboxReviews) => {\n  if (!outboxReviews || outboxReviews.length === 0) return;\n\n  const ul = document.getElementById('reviews-list');\n  outboxReviews.forEach((outboxReview) => {\n    const { request_id, ...review } = outboxReview;\n    ul.insertBefore(createReviewHTML(review, true, request_id), ul.firstChild);\n  });\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review, sending, requestId) => {\n  const article = document.createElement('article');\n  article.className = 'review';\n\n  const headerSpan = document.createElement('span');\n  headerSpan.className = 'review-header';\n\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  name.className = 'review-name';\n  headerSpan.appendChild(name);\n\n  const date = document.createElement('p');\n\n  if (sending) {\n    const icon = document.createElement('i');\n    icon.classList.add('far', 'fa-clock');\n    const loadingText = document.createElement('span');\n    loadingText.innerHTML = 'Sending';\n    date.appendChild(icon);\n    date.appendChild(loadingText);\n  } else {\n    const dateText = formatDate(new Date(review.updatedAt));\n    date.innerHTML = dateText;\n  }\n\n  date.className = 'review-date';\n  headerSpan.appendChild(date);\n  article.appendChild(headerSpan);\n\n  const contentSpan = document.createElement('span');\n  contentSpan.className = 'review-content';\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  rating.className = 'review-rating';\n  contentSpan.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  contentSpan.appendChild(comments);\n  article.appendChild(contentSpan);\n\n  if (sending) {\n    article.setAttribute('data-id', requestId);\n    article.setAttribute('aria-busy', 'true');\n    article.classList.add('sending');\n  }\n\n  return article;\n};\n\nconst updateReviewHTML = (error, requestId, review) => {\n  const reviewElement = document.querySelector(`[data-id=\"${requestId}\"]`);\n  if (error) {\n    if (reviewElement) { // for error, no need to add to UI if it doesn't exist\n      const date = reviewElement.querySelector('.review-date');\n      date.innerHTML = '';\n      const icon = document.createElement('i');\n      icon.classList.add('fas', 'fa-exclamation-triangle');\n      const errorText = document.createElement('span');\n      errorText.innerHTML = 'Sending failed';\n      date.appendChild(icon);\n      date.appendChild(errorText);\n      date.classList.add('error');\n    }\n  } else {\n    const ul = document.getElementById('reviews-list');\n    if (ul && self.restaurant) { // only update if the restaurant is loaded\n      if (reviewElement) {\n        reviewElement.classList.remove('sending');\n        const date = reviewElement.querySelector('.review-date');\n        const dateText = formatDate(new Date(review.updatedAt));\n        date.innerHTML = dateText;\n      } else {\n        createReviewHTML(review, false);\n      }\n    }\n  }\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getUrlParam = (name, url) => {\n  url = url || window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`);\n\n\n  const results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\nconst setMarkAsFavouriteFetchingState = (button, spinner) => {\n  button.setAttribute('disabled', true);\n  button.setAttribute('aria-busy', 'true');\n  spinner.classList.add('show');\n};\n\nconst removeMarkAsFavouriteFetchingState = (button, spinner) => {\n  button.removeAttribute('disabled');\n  button.setAttribute('aria-busy', 'false');\n  spinner.classList.remove('show');\n};\n\nconst toggleRestaurantAsFavourite = () => {\n  const isFavourite = stringToBoolean(self.restaurant.is_favorite);\n  const newIsFavourite = (!isFavourite) && isFavourite !== 'false';\n  const restaurantId = self.restaurant.id;\n  const button = document.getElementById('mark-as-favourite');\n  const spinner = document.getElementById('favourite-spinner');\n  let failedUpdateCallback;\n  let successMessage;\n  let errorMessage;\n  if (newIsFavourite) {\n    markRestaurantAsFavourite(button);\n    failedUpdateCallback = unmarkRestaurantAsFavourite;\n    successMessage = 'Restaurant has been marked as favourite';\n    errorMessage = 'An error occurred marking restaurant as favourite';\n  } else {\n    unmarkRestaurantAsFavourite(button);\n    failedUpdateCallback = markRestaurantAsFavourite;\n    successMessage = 'Restaurant has been unmarked as favourite';\n    errorMessage = 'An error occurred unmarking restaurant as favourite';\n  }\n  setMarkAsFavouriteFetchingState(button, spinner);\n  DBHelper.setRestaurantFavouriteStatus(restaurantId, newIsFavourite, (error, updatedRestaurant) => {\n    removeMarkAsFavouriteFetchingState(button, spinner);\n    if (!updatedRestaurant) {\n      console.error(error);\n      failedUpdateCallback(button);\n      enqueueToast(errorMessage, 'error');\n      return;\n    }\n    self.restaurant = updatedRestaurant;\n    enqueueToast(successMessage, 'success');\n  });\n};\n\nfunction showConnectionStatus() {\n  const connectionStatus = document.getElementById('connectionStatus');\n\n  if (navigator.onLine && !previouslyConnected) { // user came back online\n    enqueueToast('You are back online', 'success');\n  } else if (!navigator.onLine && previouslyConnected) { // user went offline\n    enqueueToast('You are offline', 'error');\n  }\n\n  previouslyConnected = navigator.onLine;\n}\n","/** **** modal ****** */\n\nlet previouslyFocusedElement;\n\nfunction openModal() {\n  previouslyFocusedElement = document.activeElement;\n  const overlay = document.querySelector('.overlay');\n  const interactiveElements = overlay.querySelectorAll('button, input, textarea');\n  overlay.classList.add('show');\n  document.body.classList.add('has-open-modal');\n  document.addEventListener('keydown', trapTabKey);\n  // focus the first element in the overlay. timeout is needed because of CSS transition\n  setTimeout(() => {\n    interactiveElements[0].focus();\n  }, 100);\n}\n\nfunction closeModal() {\n  clearFormErrors();\n  document.querySelector('.overlay').classList.remove('show');\n  document.body.classList.remove('has-open-modal');\n  document.removeEventListener('keydown', trapTabKey);\n  if (previouslyFocusedElement) {\n    previouslyFocusedElement.focus();\n  }\n}\n\nfunction trapTabKey(event) {\n  const overlay = document.querySelector('.overlay');\n  const interactiveElements = overlay.querySelectorAll('button, input');\n  const firstElement = interactiveElements[0];\n  const lastElement = interactiveElements[interactiveElements.length - 1];\n  if (event.key && event.key === 'Tab') {\n    if (event.shiftKey && event.target === firstElement) { // shift + tab\n      event.preventDefault();\n      lastElement.focus();\n    } else if (!event.shiftKey && event.target === lastElement) { // tab\n      event.preventDefault();\n      firstElement.focus();\n    }\n  }\n}\n\n/** **** handle errors ****** */\n\nfunction setNameInputError() {\n  const nameInput = document.getElementById('name');\n  const nameInputError = document.getElementById('name-error');\n  nameInput.classList.add('has-error');\n  nameInput.setAttribute('aria-invalid', 'true');\n  nameInput.setAttribute('aria-describedby', 'name-error');\n  nameInputError.classList.add('show');\n}\n\nfunction clearNameInputError() {\n  const nameInput = document.getElementById('name');\n  const nameInputError = document.getElementById('name-error');\n  nameInput.classList.remove('has-error');\n  nameInput.removeAttribute('aria-invalid');\n  nameInput.removeAttribute('aria-describedby');\n  nameInputError.classList.remove('show');\n}\n\nfunction setRatingInputError() {\n  const ratingInput = document.getElementById('rating');\n  const ratingInputError = document.getElementById('rating-error');\n  ratingInput.classList.add('has-error');\n  ratingInput.setAttribute('aria-invalid', 'true');\n  ratingInput.setAttribute('aria-describedby', 'rating-error');\n  ratingInputError.classList.add('show');\n}\n\nfunction clearRatingInputError() {\n  const ratingInput = document.getElementById('rating');\n  const ratingInputError = document.getElementById('rating-error');\n  ratingInput.classList.remove('has-error');\n  ratingInput.removeAttribute('aria-invalid');\n  ratingInput.removeAttribute('aria-describedby');\n  ratingInputError.classList.remove('show');\n}\n\nfunction setCommentInputError() {\n  const commentInput = document.getElementById('comments');\n  const commentInputError = document.getElementById('comments-error');\n  commentInput.classList.add('has-error');\n  commentInput.setAttribute('aria-invalid', 'true');\n  commentInput.setAttribute('aria-describedby', 'comments-error');\n  commentInputError.classList.add('show');\n}\n\nfunction clearCommentInputError() {\n  const commentInput = document.getElementById('comments');\n  const commentInputError = document.getElementById('comments-error');\n  commentInput.classList.remove('has-error');\n  commentInput.removeAttribute('aria-invalid');\n  commentInput.removeAttribute('aria-describedby');\n  commentInputError.classList.remove('show');\n}\n\nconst errorFunctions = {\n  name: {\n    setError: setNameInputError,\n    clearError: clearNameInputError,\n  },\n  rating: {\n    setError: setRatingInputError,\n    clearError: clearRatingInputError,\n  },\n  comments: {\n    setError: setCommentInputError,\n    clearError: clearCommentInputError,\n  },\n};\n\n/** **** validation ****** */\n\nfunction validateInput(id, value) {\n  const input = document.getElementById(id).cloneNode();\n  let inputValue;\n  if (value !== undefined) {\n    inputValue = value;\n  } else {\n    inputValue = input.value;\n  }\n  inputValue = id === 'rating' ? Number.parseInt(inputValue, 10) : inputValue;\n  if (inputValue) {\n    errorFunctions[id].clearError();\n    return true;\n  }\n  requestAnimationFrame(errorFunctions[id].setError);\n  return false;\n}\n\nfunction validateAllInputs() {\n  let error = false;\n  const inputIds = ['name', 'rating', 'comments'];\n  const invalidInputs = [];\n  inputIds.forEach((id) => {\n    const inputValid = validateInput(id);\n    if (!inputValid) {\n      invalidInputs.push(id);\n      error = true;\n    }\n  });\n  return { error, invalidInputs };\n}\n\n/** **** handle events ****** */\n\nfunction handleRangeChange(event) {\n  const ratingValue = document.querySelector('.rating-value');\n  ratingValue.innerHTML = `${event.target.value}/5`;\n  validateInput(event.target.name, event.target.value);\n}\n\nfunction handleInputKeyUp(event) {\n  if (!(event.key && event.key === 'Tab')) {\n    // when tab is used, allow the onblur handler to perform validation\n    // when the tab key is pressed, focus is already on the next input when the event fires\n    // so the wrong input is validated\n    validateInput(event.target.name, event.target.value);\n  }\n}\n\nfunction handleInputBlur(event) {\n  validateInput(event.target.name, event.target.value);\n}\n\nfunction getFormInputValues() {\n  const inputIds = ['name', 'rating', 'comments'];\n  const values = {};\n  inputIds.forEach((id) => {\n    values[id] = document.getElementById(id).value;\n  });\n  return values;\n}\n\nfunction clearForm() {\n  document.getElementById('name').value = '';\n  document.getElementById('rating').value = '0';\n  document.querySelector('.rating-value').innerHTML = '0/5';\n  document.getElementById('comments').value = '';\n}\n\nfunction clearFormErrors() {\n  document.getElementById('name-error').classList.remove('show');\n  document.getElementById('rating-error').classList.remove('show');\n  document.getElementById('comments-error').classList.remove('show');\n  document.getElementById('add-review-form-error').classList.remove('show');\n  document.getElementById('add-review-form-error').innerHTML = '';\n  document.getElementById('name').classList.remove('has-error');\n  document.getElementById('rating').classList.remove('has-error');\n  document.getElementById('comments').classList.remove('has-error');\n}\n\nfunction handleAddReviewSubmit() {\n  const { error, invalidInputs } = validateAllInputs();\n  if (!error) {\n    const { name, rating, comments } = getFormInputValues();\n    if ((!navigator.serviceWorker) || (!navigator.serviceWorker.controller)) {\n      // perform regular fetch and regular updates\n      const submitButton = document.getElementById('add-review-submit');\n      submitButton.setAttribute('disabled', true);\n      submitButton.setAttribute('aria-busy', 'true');\n      DBHelper.addReview(self.restaurant.id, name, rating, comments, (error, newReview) => {\n        submitButton.removeAttribute('disabled');\n        submitButton.setAttribute('aria-busy', 'false');\n        if (error) {\n          enqueueToast('An error occurred. Please try again', 'error');\n          console.log(error);\n        } else {\n          enqueueToast(`${name}'s review has been saved`, 'success');\n          const ul = document.getElementById('reviews-list');\n          ul.insertBefore(createReviewHTML(newReview), ul.firstChild);\n          closeModal();\n          clearForm();\n        }\n      });\n    } else {\n      const requestId = `${self.restaurant.id}-${Date.now()}`;\n      const newReview = {\n        name, rating, comments, restaurant_id: self.restaurant.id,\n      };\n      const ul = document.getElementById('reviews-list');\n      ul.insertBefore(createReviewHTML(newReview, true, requestId), ul.firstChild);\n\n      if (('onLine' in navigator) && !navigator.onLine) {\n        enqueueToast('Your review will be submitted when you are back online');\n      }\n\n      closeModal();\n      clearForm();\n      navigator.serviceWorker.controller.postMessage({\n        type: 'post-review',\n        review: newReview,\n        requestId,\n      });\n    }\n  } else { // form errors not cleared\n    const formError = document.getElementById('add-review-form-error');\n    const errorText = `Invalid input for: ${invalidInputs.join(', ')}`;\n    formError.innerHTML = errorText;\n    formError.classList.add('show');\n    document.getElementById(invalidInputs[0]).focus();\n  }\n}\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n}\n"]}