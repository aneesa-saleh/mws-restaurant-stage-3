{"version":3,"sources":["restaurant_info.js","addReviewModal.js"],"names":["restaurant","reviews","outboxReviews","newMap","matchesMediaQuery","mediaQuery","document","event","previouslyConnected","navigator","onLine","initMap","window","matchMedia","matches","updateRestaurantContainerAria","serviceWorker","addEventListener","_event$data","caches","type","requestId","review","error","cleanMapboxTilesCache","setInterval","enqueueToast","concat","data","showConnectionStatus","updateReviewHTML","getElementById","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","fetchRestaurantFromURL","MAPBOX_API_KEY","attribution","addTo","mapMarkerForRestaurant","id","fillBreadcrumb","DBHelper","nextMatchesMediaQuery","previouslyFocusedElement","accessibleRestaurantContainer","setAttribute","restaurantContainer","callback","fetchRestaurantById","classList","add","fillRestaurantHTML","arguments","length","undefined","name","picture","createElement","sourceLarge","srcset","imageUrlForRestaurant","size","wide","appendChild","media","sourceMedium","sourceSmall","image","address","innerHTML","alt","cuisine_type","addReviewButton","removeAttribute","operating_hours","fillRestaurantHoursHTML","call","fillMarkAsFavouriteHTML","operatingHours","addReviewOverlayHeading","hasOwnProperty","key","row","day","time","Object","hours","markRestaurantAsFavourite","button","icon","querySelector","remove","unmarkRestaurantAsFavourite","isFavourite","is_favorite","text","stringToBoolean","favouriteButton","fetchReviews","fillReviewsHTML","getOutboxReviews","fetchReviewsByRestaurantId","noReviews","forEach","ul","insertBefore","createReviewHTML","firstChild","fillSendingReviewsHTML","request_id","outboxReview","_objectWithoutProperties","sending","article","headerSpan","container","className","loadingText","date","updatedAt","dateText","contentSpan","rating","comments","formatDate","reviewElement","errorText","Date","breadcrumb","li","getUrlParam","url","location","href","results","RegExp","exec","decodeURIComponent","spinner","removeMarkAsFavouriteFetchingState","failedUpdateCallback","successMessage","errorMessage","restaurantId","newIsFavourite","setMarkAsFavouriteFetchingState","setRestaurantFavouriteStatus","updatedRestaurant","toggleRestaurantAsFavourite","openModal","activeElement","overlay","interactiveElements","querySelectorAll","body","trapTabKey","setTimeout","focus","closeModal","clearFormErrors","removeEventListener","firstElement","lastElement","shiftKey","target","preventDefault","setNameInputError","nameInput","nameInputError","clearNameInputError","setRatingInputError","ratingInput","ratingInputError","clearRatingInputError","setCommentInputError","commentInput","commentInputError","clearCommentInputError","errorFunctions","setError","clearError","validateInput","value","inputValue","input","cloneNode","Number","parseInt","requestAnimationFrame","validateAllInputs","invalidInputs","push","handleRangeChange","handleInputKeyUp","handleInputBlur","getFormInputValues","values","clearForm","handleAddReviewSubmit","_validateAllInputs","formError","join","_getFormInputValues","controller","now","newReview","restaurant_id","postMessage","submitButton","addReview","log","handleFormSubmit"],"mappings":"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","file":"../js/restaurant_info.js","sourcesContent":["let restaurant;\nlet reviews;\nlet outboxReviews;\nlet newMap;\nlet matchesMediaQuery = true;\nconst mediaQuery = '(min-width: 800px)';\nlet previouslyConnected;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  previouslyConnected = navigator.onLine;\n\n  initMap();\n  if (window.matchMedia) {\n    matchesMediaQuery = window.matchMedia(mediaQuery).matches;\n  }\n  updateRestaurantContainerAria(); // set initial aria values\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n\n  if (navigator.serviceWorker) {\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      const {\n        type, requestId, review, error,\n      } = event.data;\n      if (type === 'update-review') {\n        if (error) {\n          enqueueToast('An error occurred while submitting your review', 'error');\n          updateReviewHTML(true, requestId);\n        } else {\n          enqueueToast(`${review.name}'s review has been saved`, 'success');\n          updateReviewHTML(false, requestId, review);\n        }\n      }\n    });\n  }\n\n  if ('onLine' in navigator) {\n    window.addEventListener('online', showConnectionStatus);\n    window.addEventListener('offline', showConnectionStatus);\n    showConnectionStatus();\n  }\n\n  const toast = document.getElementById('toast');\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false,\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: MAPBOX_API_KEY,\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n          + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n          + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets',\n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n};\n\n/**\n* Update aria-hidden values of the visible and accessible restaurant containers\n*/\nwindow.addEventListener('resize', () => {\n  if (window.matchMedia) {\n    const nextMatchesMediaQuery = window.matchMedia(mediaQuery).matches;\n    if (nextMatchesMediaQuery !== matchesMediaQuery) { // only update aria when layout changes\n      matchesMediaQuery = nextMatchesMediaQuery;\n      updateRestaurantContainerAria();\n    }\n  }\n});\n\n/**\n* Set aria-hidden values for visible and regular restaurant containers\n* Accessible restaurant container is off screen\n* It is required to maintain screen reading order when the layout shifts\n*/\nconst updateRestaurantContainerAria = () => {\n  const restaurantContainer = document.getElementById('restaurant-container');\n  const accessibleRestaurantContainer = document.getElementById('accessible-restaurant-container');\n  if (matchesMediaQuery) { // larger layout, screen reading order off\n    restaurantContainer.setAttribute('aria-hidden', 'true');\n    accessibleRestaurantContainer.setAttribute('aria-hidden', 'false');\n  } else { // use regular reading order\n    restaurantContainer.setAttribute('aria-hidden', 'false');\n    accessibleRestaurantContainer.setAttribute('aria-hidden', 'true');\n  }\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getUrlParam('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL';\n    callback(error, null);\n    document.getElementById('main-error').classList.add('show');\n    document.getElementById('wrap-main-content').classList.add('hide');\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        document.getElementById('main-error').classList.add('show');\n        document.getElementById('wrap-main-content').classList.add('hide');\n        return;\n      }\n      fetchReviews(id);\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML += restaurant.address;\n\n  const picture = document.getElementById('restaurant-picture');\n\n  const sourceLarge = document.createElement('source');\n  sourceLarge.media = '(min-width: 800px)';\n  sourceLarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'large', wide: true });\n  sourceLarge.type = 'image/jpeg';\n  picture.appendChild(sourceLarge);\n\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 600px)';\n  sourceMedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' });\n  sourceMedium.type = 'image/jpeg';\n  picture.appendChild(sourceMedium);\n\n  const sourceSmall = document.createElement('source');\n  sourceSmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' });\n  sourceSmall.type = 'image/jpeg';\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  // set default size in case picture element is not supported\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.alt;\n  picture.appendChild(image);\n\n  const accessibleRestaurantImage = document.getElementById('accessible-restaurant-img');\n  accessibleRestaurantImage.setAttribute('aria-label', restaurant.alt);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = `Cuisine: ${restaurant.cuisine_type}`;\n\n  const accessibleRestaurantCuisine = document.getElementById('accessible-restaurant-cuisine');\n  accessibleRestaurantCuisine.innerHTML = `Cuisine: ${restaurant.cuisine_type}`;\n\n  const addReviewButton = document.getElementById('add-review-button');\n  addReviewButton.setAttribute('aria-label', `Add a review for ${restaurant.name}`);\n  addReviewButton.removeAttribute('disabled');\n\n  const addReviewOverlayHeading = document.getElementById('add-review-overlay-heading');\n  addReviewOverlayHeading.innerHTML = `Add review for ${restaurant.name}`;\n\n  // enable buttons\n  document.getElementById('mark-as-favourite').removeAttribute('disabled');\n  document.getElementById('add-review-button').removeAttribute('disabled');\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  if (Object.hasOwnProperty.call(restaurant, 'is_favorite')) {\n    fillMarkAsFavouriteHTML();\n  }\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (const key in operatingHours) {\n    if (Object.prototype.hasOwnProperty.call(operatingHours, key)) {\n      const row = document.createElement('tr');\n\n      const day = document.createElement('td');\n      day.innerHTML = key;\n      row.appendChild(day);\n\n      const time = document.createElement('td');\n      time.innerHTML = operatingHours[key];\n      row.appendChild(time);\n\n      hours.appendChild(row);\n    }\n  }\n};\n\nconst markRestaurantAsFavourite = (button) => {\n  const icon = button.querySelector('i');\n  const text = button.querySelector('span');\n  text.innerHTML = 'Unmark restaurant as favourite';\n  icon.classList.add('fas', 'marked');\n  icon.classList.remove('far', 'unmarked');\n  icon.setAttribute('aria-label', 'Restaurant is currently marked as favourite');\n};\n\nconst unmarkRestaurantAsFavourite = (button) => {\n  const icon = button.querySelector('i');\n  const text = button.querySelector('span');\n  text.innerHTML = 'Mark restaurant as favourite';\n  icon.classList.add('far', 'unmarked');\n  icon.classList.remove('fas', 'marked');\n  icon.setAttribute('aria-label', 'Restaurant is not currently marked as favourite');\n};\n\n/**\n * Set state and text for mark as favourite button.\n */\nconst fillMarkAsFavouriteHTML = (isFavourite = self.restaurant.is_favorite) => {\n  const favouriteButton = document.getElementById('mark-as-favourite');\n  if (stringToBoolean(isFavourite)) {\n    markRestaurantAsFavourite(favouriteButton);\n  } else {\n    unmarkRestaurantAsFavourite(favouriteButton);\n  }\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchReviews = (id) => {\n  DBHelper.fetchReviewsByRestaurantId(id, (error, reviews) => {\n    self.reviews = reviews;\n    if (!reviews) {\n      console.error(error);\n      return;\n    }\n    fillReviewsHTML();\n    DBHelper.getOutboxReviews(id, (error, outboxReviews) => {\n      if (error) {\n        console.log(error);\n      } else {\n        self.outboxReviews = outboxReviews;\n        fillSendingReviewsHTML();\n      }\n    });\n  });\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.reviews) => {\n  if (!reviews || reviews.length === 0) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach((review) => {\n    ul.insertBefore(createReviewHTML(review), ul.firstChild);\n  });\n};\n\nconst fillSendingReviewsHTML = (outboxReviews = self.outboxReviews) => {\n  if (!outboxReviews || outboxReviews.length === 0) return;\n\n  const ul = document.getElementById('reviews-list');\n  outboxReviews.forEach((outboxReview) => {\n    const { request_id, ...review } = outboxReview;\n    ul.insertBefore(createReviewHTML(review, true, request_id), ul.firstChild);\n  });\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review, sending, requestId) => {\n  const article = document.createElement('article');\n  article.className = 'review';\n\n  const headerSpan = document.createElement('span');\n  headerSpan.className = 'review-header';\n\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  name.className = 'review-name';\n  headerSpan.appendChild(name);\n\n  const date = document.createElement('p');\n\n  if (sending) {\n    const icon = document.createElement('i');\n    icon.classList.add('far', 'fa-clock');\n    const loadingText = document.createElement('span');\n    loadingText.innerHTML = 'Sending';\n    date.appendChild(icon);\n    date.appendChild(loadingText);\n  } else {\n    const dateText = formatDate(new Date(review.updatedAt));\n    date.innerHTML = dateText;\n  }\n\n  date.className = 'review-date';\n  headerSpan.appendChild(date);\n  article.appendChild(headerSpan);\n\n  const contentSpan = document.createElement('span');\n  contentSpan.className = 'review-content';\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  rating.className = 'review-rating';\n  contentSpan.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  contentSpan.appendChild(comments);\n  article.appendChild(contentSpan);\n\n  if (sending) {\n    article.setAttribute('data-id', requestId);\n    article.setAttribute('aria-busy', 'true');\n    article.classList.add('sending');\n  }\n\n  return article;\n};\n\nconst updateReviewHTML = (error, requestId, review) => {\n  const reviewElement = document.querySelector(`[data-id=\"${requestId}\"]`);\n  if (error) {\n    if (reviewElement) { // for error, no need to add to UI if it doesn't exist\n      const date = reviewElement.querySelector('.review-date');\n      date.innerHTML = '';\n      const icon = document.createElement('i');\n      icon.classList.add('fas', 'fa-exclamation-triangle');\n      const errorText = document.createElement('span');\n      errorText.innerHTML = 'Sending failed';\n      date.appendChild(icon);\n      date.appendChild(errorText);\n      date.classList.add('error');\n    }\n  } else {\n    const ul = document.getElementById('reviews-list');\n    if (ul && self.restaurant) { // only update if the restaurant is loaded\n      if (reviewElement) {\n        reviewElement.classList.remove('sending');\n        const date = reviewElement.querySelector('.review-date');\n        const dateText = formatDate(new Date(review.updatedAt));\n        date.innerHTML = dateText;\n      } else {\n        createReviewHTML(review, false);\n      }\n    }\n  }\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getUrlParam = (name, url) => {\n  url = url || window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`);\n\n\n  const results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\nconst setMarkAsFavouriteFetchingState = (button, spinner) => {\n  button.setAttribute('disabled', true);\n  button.setAttribute('aria-busy', 'true');\n  spinner.classList.add('show');\n};\n\nconst removeMarkAsFavouriteFetchingState = (button, spinner) => {\n  button.removeAttribute('disabled');\n  button.setAttribute('aria-busy', 'false');\n  spinner.classList.remove('show');\n};\n\nconst toggleRestaurantAsFavourite = () => {\n  const isFavourite = stringToBoolean(self.restaurant.is_favorite);\n  const newIsFavourite = (!isFavourite) && isFavourite !== 'false';\n  const restaurantId = self.restaurant.id;\n  const button = document.getElementById('mark-as-favourite');\n  const spinner = document.getElementById('favourite-spinner');\n  let failedUpdateCallback;\n  let successMessage;\n  let errorMessage;\n  if (newIsFavourite) {\n    markRestaurantAsFavourite(button);\n    failedUpdateCallback = unmarkRestaurantAsFavourite;\n    successMessage = 'Restaurant has been marked as favourite';\n    errorMessage = 'An error occurred marking restaurant as favourite';\n  } else {\n    unmarkRestaurantAsFavourite(button);\n    failedUpdateCallback = markRestaurantAsFavourite;\n    successMessage = 'Restaurant has been unmarked as favourite';\n    errorMessage = 'An error occurred unmarking restaurant as favourite';\n  }\n  setMarkAsFavouriteFetchingState(button, spinner);\n  DBHelper.setRestaurantFavouriteStatus(restaurantId, newIsFavourite, (error, updatedRestaurant) => {\n    removeMarkAsFavouriteFetchingState(button, spinner);\n    if (!updatedRestaurant) {\n      console.error(error);\n      failedUpdateCallback(button);\n      enqueueToast(errorMessage, 'error');\n      return;\n    }\n    self.restaurant = updatedRestaurant;\n    enqueueToast(successMessage, 'success');\n  });\n};\n\nfunction showConnectionStatus() {\n  const connectionStatus = document.getElementById('connectionStatus');\n\n  if (navigator.onLine && !previouslyConnected) { // user came back online\n    enqueueToast('You are back online', 'success');\n  } else if (!navigator.onLine && previouslyConnected) { // user went offline\n    enqueueToast('You are offline', 'error');\n  }\n\n  previouslyConnected = navigator.onLine;\n}\n","/** **** modal ****** */\n\nlet previouslyFocusedElement;\n\nfunction openModal() {\n  previouslyFocusedElement = document.activeElement;\n  const overlay = document.querySelector('.overlay');\n  const interactiveElements = overlay.querySelectorAll('button, input, textarea');\n  overlay.classList.add('show');\n  document.body.classList.add('has-open-modal');\n  document.addEventListener('keydown', trapTabKey);\n  // focus the first element in the overlay. timeout is needed because of CSS transition\n  setTimeout(() => {\n    interactiveElements[0].focus();\n  }, 100);\n}\n\nfunction closeModal() {\n  clearFormErrors();\n  document.querySelector('.overlay').classList.remove('show');\n  document.body.classList.remove('has-open-modal');\n  document.removeEventListener('keydown', trapTabKey);\n  if (previouslyFocusedElement) {\n    previouslyFocusedElement.focus();\n  }\n}\n\nfunction trapTabKey(event) {\n  const overlay = document.querySelector('.overlay');\n  const interactiveElements = overlay.querySelectorAll('button, input');\n  const firstElement = interactiveElements[0];\n  const lastElement = interactiveElements[interactiveElements.length - 1];\n  if (event.key && event.key === 'Tab') {\n    if (event.shiftKey && event.target === firstElement) { // shift + tab\n      event.preventDefault();\n      lastElement.focus();\n    } else if (!event.shiftKey && event.target === lastElement) { // tab\n      event.preventDefault();\n      firstElement.focus();\n    }\n  }\n}\n\n/** **** handle errors ****** */\n\nfunction setNameInputError() {\n  const nameInput = document.getElementById('name');\n  const nameInputError = document.getElementById('name-error');\n  nameInput.classList.add('has-error');\n  nameInput.setAttribute('aria-invalid', 'true');\n  nameInput.setAttribute('aria-describedby', 'name-error');\n  nameInputError.classList.add('show');\n}\n\nfunction clearNameInputError() {\n  const nameInput = document.getElementById('name');\n  const nameInputError = document.getElementById('name-error');\n  nameInput.classList.remove('has-error');\n  nameInput.removeAttribute('aria-invalid');\n  nameInput.removeAttribute('aria-describedby');\n  nameInputError.classList.remove('show');\n}\n\nfunction setRatingInputError() {\n  const ratingInput = document.getElementById('rating');\n  const ratingInputError = document.getElementById('rating-error');\n  ratingInput.classList.add('has-error');\n  ratingInput.setAttribute('aria-invalid', 'true');\n  ratingInput.setAttribute('aria-describedby', 'rating-error');\n  ratingInputError.classList.add('show');\n}\n\nfunction clearRatingInputError() {\n  const ratingInput = document.getElementById('rating');\n  const ratingInputError = document.getElementById('rating-error');\n  ratingInput.classList.remove('has-error');\n  ratingInput.removeAttribute('aria-invalid');\n  ratingInput.removeAttribute('aria-describedby');\n  ratingInputError.classList.remove('show');\n}\n\nfunction setCommentInputError() {\n  const commentInput = document.getElementById('comments');\n  const commentInputError = document.getElementById('comments-error');\n  commentInput.classList.add('has-error');\n  commentInput.setAttribute('aria-invalid', 'true');\n  commentInput.setAttribute('aria-describedby', 'comments-error');\n  commentInputError.classList.add('show');\n}\n\nfunction clearCommentInputError() {\n  const commentInput = document.getElementById('comments');\n  const commentInputError = document.getElementById('comments-error');\n  commentInput.classList.remove('has-error');\n  commentInput.removeAttribute('aria-invalid');\n  commentInput.removeAttribute('aria-describedby');\n  commentInputError.classList.remove('show');\n}\n\nconst errorFunctions = {\n  name: {\n    setError: setNameInputError,\n    clearError: clearNameInputError,\n  },\n  rating: {\n    setError: setRatingInputError,\n    clearError: clearRatingInputError,\n  },\n  comments: {\n    setError: setCommentInputError,\n    clearError: clearCommentInputError,\n  },\n};\n\n/** **** validation ****** */\n\nfunction validateInput(id, value) {\n  const input = document.getElementById(id).cloneNode();\n  let inputValue;\n  if (value !== undefined) {\n    inputValue = value;\n  } else {\n    inputValue = input.value;\n  }\n  inputValue = id === 'rating' ? Number.parseInt(inputValue, 10) : inputValue;\n  if (inputValue) {\n    errorFunctions[id].clearError();\n    return true;\n  }\n  requestAnimationFrame(errorFunctions[id].setError);\n  return false;\n}\n\nfunction validateAllInputs() {\n  let error = false;\n  const inputIds = ['name', 'rating', 'comments'];\n  const invalidInputs = [];\n  inputIds.forEach((id) => {\n    const inputValid = validateInput(id);\n    if (!inputValid) {\n      invalidInputs.push(id);\n      error = true;\n    }\n  });\n  return { error, invalidInputs };\n}\n\n/** **** handle events ****** */\n\nfunction handleRangeChange(event) {\n  const ratingValue = document.querySelector('.rating-value');\n  ratingValue.innerHTML = `${event.target.value}/5`;\n  validateInput(event.target.name, event.target.value);\n}\n\nfunction handleInputKeyUp(event) {\n  if (!(event.key && event.key === 'Tab')) {\n    // when tab is used, allow the onblur handler to perform validation\n    // when the tab key is pressed, focus is already on the next input when the event fires\n    // so the wrong input is validated\n    validateInput(event.target.name, event.target.value);\n  }\n}\n\nfunction handleInputBlur(event) {\n  validateInput(event.target.name, event.target.value);\n}\n\nfunction getFormInputValues() {\n  const inputIds = ['name', 'rating', 'comments'];\n  const values = {};\n  inputIds.forEach((id) => {\n    values[id] = document.getElementById(id).value;\n  });\n  return values;\n}\n\nfunction clearForm() {\n  document.getElementById('name').value = '';\n  document.getElementById('rating').value = '0';\n  document.querySelector('.rating-value').innerHTML = '0/5';\n  document.getElementById('comments').value = '';\n}\n\nfunction clearFormErrors() {\n  document.getElementById('name-error').classList.remove('show');\n  document.getElementById('rating-error').classList.remove('show');\n  document.getElementById('comments-error').classList.remove('show');\n  document.getElementById('add-review-form-error').classList.remove('show');\n  document.getElementById('add-review-form-error').innerHTML = '';\n  document.getElementById('name').classList.remove('has-error');\n  document.getElementById('rating').classList.remove('has-error');\n  document.getElementById('comments').classList.remove('has-error');\n}\n\nfunction handleAddReviewSubmit() {\n  const { error, invalidInputs } = validateAllInputs();\n  if (!error) {\n    const { name, rating, comments } = getFormInputValues();\n    if ((!navigator.serviceWorker) || (!navigator.serviceWorker.controller)) {\n      // perform regular fetch and regular updates\n      const submitButton = document.getElementById('add-review-submit');\n      submitButton.setAttribute('disabled', true);\n      submitButton.setAttribute('aria-busy', 'true');\n      DBHelper.addReview(self.restaurant.id, name, rating, comments, (error, newReview) => {\n        submitButton.removeAttribute('disabled');\n        submitButton.setAttribute('aria-busy', 'false');\n        if (error) {\n          enqueueToast('An error occurred. Please try again', 'error');\n          console.log(error);\n        } else {\n          enqueueToast(`${name}'s review has been saved`, 'success');\n          const ul = document.getElementById('reviews-list');\n          ul.insertBefore(createReviewHTML(newReview), ul.firstChild);\n          closeModal();\n          clearForm();\n        }\n      });\n    } else {\n      const requestId = `${self.restaurant.id}-${Date.now()}`;\n      const newReview = {\n        name, rating, comments, restaurant_id: self.restaurant.id,\n      };\n      const ul = document.getElementById('reviews-list');\n      ul.insertBefore(createReviewHTML(newReview, true, requestId), ul.firstChild);\n\n      if (('onLine' in navigator) && !navigator.onLine) {\n        enqueueToast('Your review will be submitted when you are back online');\n      }\n\n      closeModal();\n      clearForm();\n      navigator.serviceWorker.controller.postMessage({\n        type: 'post-review',\n        review: newReview,\n        requestId,\n      });\n    }\n  } else { // form errors not cleared\n    const formError = document.getElementById('add-review-form-error');\n    const errorText = `Invalid input for: ${invalidInputs.join(', ')}`;\n    formError.innerHTML = errorText;\n    formError.classList.add('show');\n    document.getElementById(invalidInputs[0]).focus();\n  }\n}\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n}\n"]}