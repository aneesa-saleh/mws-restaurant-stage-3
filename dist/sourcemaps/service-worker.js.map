{"version":3,"sources":["service-worker.js"],"names":["importScripts","staticCacheName","restaurantImagesCache","mapboxTilesCache","fontsCache","fontAwesomeCache","self","addEventListener","addAll","event","catch","caches","console","then","cache","dbPromise","review","error","outboxStore","waitUntil","registration","cacheNames","register","Promise","requestId","filter","cacheName","startsWith","allCaches","includes","map","delete","log","clients","request","comments","addReview","data","DBHelper","restaurant_id","db","matchAll","objectStore","request_id","client","postMessage","transaction","get","rating","name","newReview","type","forEach","reviewsStore","URL","origin","restaurantImagePathRegex","put","requestUrl","pathname","match","serveFonts","serveFontAwesome","test","respondWith","serveRestaurantImage","response","fetch","serveMapboxTiles","storageUrl","split","networkResponse","ignoreSearch","url","open","clone"],"mappings":"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","file":"../service-worker.js","sourcesContent":["importScripts('/js/helpers.js', 'https://cdn.jsdelivr.net/npm/idb@2.1.3/lib/idb.min.js');\n\nconst staticCacheName = 'restaurant-reviews-static-v5';\nconst restaurantImagesCache = 'restaurant-reviews-restaurant-images';\nconst mapboxTilesCache = 'restaurant-reviews-map-tiles';\nconst fontsCache = 'restaurant-reviews-fonts';\nconst fontAwesomeCache = 'font-awesome';\nconst allCaches = [\n  staticCacheName,\n  restaurantImagesCache,\n  mapboxTilesCache,\n  fontsCache,\n  fontAwesomeCache,\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(staticCacheName).then(cache => cache.addAll([\n      '/',\n      '/restaurant.html',\n      '/css/restaurant-details.css',\n      '/css/restaurants-list.css',\n      '/js/helpers.js',\n      '/js/main.js',\n      '/js/restaurant_info.js',\n      '/img/offline.svg',\n      '/img/offline_wide.svg',\n      '/img/spinner.gif',\n      '/img/restaurant_map_tiny.png',\n      '/img/restaurants_map_tiny.png',\n      'https://cdn.rawgit.com/jakearchibald/idb/master/lib/idb.js',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js',\n      'https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,700',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png',\n    ])).catch(error => console.log(error)),\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  // delete the old versions of the cache\n  event.waitUntil(\n    caches.keys().then(cacheNames => Promise.all(\n      cacheNames.filter(cacheName => (\n        cacheName.startsWith('restaurant-reviews-') && !allCaches.includes(cacheName)\n      )).map(cacheName => caches.delete(cacheName)),\n    )).catch(error => console.log(error)),\n  );\n\n  self.clients.claim();\n});\n\nconst dbPromise = openDatabase(true);\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'post-review') {\n    const { review, requestId } = event.data;\n    dbPromise.then((db) => {\n      const outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n      outboxStore.put({ ...review, request_id: requestId });\n      self.registration.sync.register(requestId);\n    });\n  }\n});\n\nself.addEventListener('sync', (event) => {\n  event.waitUntil(\n    dbPromise.then((db) => {\n      const requestId = event.tag;\n      let outboxStore = db.transaction('outbox').objectStore('outbox');\n      outboxStore.get(requestId).then((request) => {\n        const {\n          restaurant_id, name, rating, comments,\n        } = request;\n        return DBHelper.addReview(restaurant_id, name, rating, comments, (error, newReview) => {\n          if (error) {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                client.postMessage({\n                  type: 'update-review',\n                  error: true,\n                  requestId,\n                });\n              });\n            });\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          } else {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                client.postMessage({\n                  type: 'update-review',\n                  review: newReview,\n                  requestId,\n                });\n              });\n            });\n            // add review to reviews store\n            const reviewsStore = db.transaction('reviews', 'readwrite').objectStore('reviews');\n            reviewsStore.put(newReview);\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          }\n        });\n      });\n    }),\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  const requestUrl = new URL(event.request.url);\n\n  if (requestUrl.origin === location.origin) {\n    const restaurantImagePathRegex = /img\\/[0-9_\\-a-zA-Z]+\\.jpg/;\n    if (restaurantImagePathRegex.test(requestUrl.pathname)) {\n      event.respondWith(serveRestaurantImage(event.request));\n      return;\n    }\n\n    // cache should match index.html to /\n    if (requestUrl.pathname.startsWith('/index.html')) {\n      event.respondWith(caches.match('/')\n        .then(response => response || fetch(event.request)));\n      return;\n    }\n  } else if (requestUrl.origin === 'https://api.tiles.mapbox.com') {\n    event.respondWith(serveMapboxTiles(event.request));\n    return;\n  } else if (requestUrl.origin === 'https://fonts.gstatic.com') {\n    event.respondWith(serveFonts(event.request));\n    return;\n  } else if (requestUrl.origin === 'https://use.fontawesome.com') {\n    event.respondWith(serveFontAwesome(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request, { ignoreSearch: true }) // ignore search for /restaurant.html?id=X\n      .then(response => response || fetch(event.request)),\n  );\n});\n\nconst serveRestaurantImage = (request) => {\n  // image urls have multiple - and _ for orientation, crop, pixel density and screen size\n  // the relevant part of the url is before the first -\n  const storageUrl = request.url.split('-')[0];\n\n  return caches.open(restaurantImagesCache).then(\n    cache => cache.match(storageUrl).then((response) => {\n      if (response) return response;\n\n      return fetch(request).then((networkResponse) => {\n        cache.put(storageUrl, networkResponse.clone());\n        return networkResponse;\n      }).catch((error) => {\n        console.log(error);\n        // use of offline images inspired by Salah Hamza's stage 1 project\n        // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js\n        if (request.url.includes('wide')) return caches.match('/img/offline_wide.svg');\n        return caches.match('/img/offline.svg');\n      });\n    }),\n  );\n};\n\nconst serveMapboxTiles = request => caches.open(mapboxTilesCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n\nconst serveFonts = request => caches.open(fontsCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n\nconst serveFontAwesome = request => caches.open(fontAwesomeCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n"]}