{"version":3,"sources":["service-worker.js"],"names":["importScripts","staticCacheName","restaurantImagesCache","mapboxTilesCache","allCaches","self","addEventListener","event","waitUntil","caches","cache","then","addAll","catch","dbPromise","console","log","error","requestId","outboxStore","put","cacheNames","Promise","review","request_id","cacheName","startsWith","includes","registration","sync","register","transaction","restaurant_id","name","request","_event$data","data","rating","comments","db","addReview","_objectSpread","tag","objectStore","get","delete","newReview","clients","matchAll","forEach","client","postMessage","type","respondWith","serveRestaurantImage","requestUrl","URL","url","serveMapboxTiles","test","pathname","match","response","fetch","origin","ignoreSearch","networkResponse","storageUrl","clone","split","open"],"mappings":"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","file":"../service-worker.js","sourcesContent":["importScripts('/js/helpers.js', 'https://cdn.jsdelivr.net/npm/idb@2.1.3/lib/idb.min.js');\n\nconst staticCacheName = 'restaurant-reviews-static-v5';\nconst restaurantImagesCache = 'restaurant-reviews-restaurant-images';\nconst mapboxTilesCache = 'restaurant-reviews-map-tiles';\nconst allCaches = [\n  staticCacheName,\n  restaurantImagesCache,\n  mapboxTilesCache,\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(staticCacheName).then(cache => cache.addAll([\n      '/',\n      '/restaurant.html',\n      '/css/restaurant-details.css',\n      '/css/restaurants-list.css',\n      '/js/helpers.js',\n      '/js/main.js',\n      '/js/restaurant_info.js',\n      '/img/offline.svg',\n      '/img/offline_wide.svg',\n      '/img/spinner.gif',\n      'https://cdn.rawgit.com/jakearchibald/idb/master/lib/idb.js',\n      'https://use.fontawesome.com/releases/v5.5.0/css/all.css',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js',\n      'https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png',\n    ])).catch(error => console.log(error)),\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  // delete the old versions of the cache\n  event.waitUntil(\n    caches.keys().then(cacheNames => Promise.all(\n      cacheNames.filter(cacheName => (\n        cacheName.startsWith('restaurant-reviews-') && !allCaches.includes(cacheName)\n      )).map(cacheName => caches.delete(cacheName)),\n    )).catch(error => console.log(error)),\n  );\n\n  self.clients.claim();\n});\n\nconst dbPromise = openDatabase(true);\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'post-review') {\n    const { review, requestId } = event.data;\n    dbPromise.then((db) => {\n      const outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n      outboxStore.put({ ...review, request_id: requestId });\n      self.registration.sync.register(requestId);\n    });\n  }\n});\n\nself.addEventListener('sync', function (event) {\n  event.waitUntil(\n    dbPromise.then((db) => {\n      const requestId = event.tag;\n      let outboxStore = db.transaction('outbox').objectStore('outbox');\n      outboxStore.get(requestId).then((request) => {\n        const { restaurant_id, name, rating, comments } = request;\n        return DBHelper.addReview(restaurant_id, name, rating, comments, (error, newReview) => {\n          if (error) {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                  client.postMessage({\n                    type: 'update-review',\n                    error: true,\n                    requestId,\n                  });\n              });\n            });\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          } else {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                  client.postMessage({\n                    type: 'update-review',\n                    review: newReview,\n                    requestId,\n                  });\n              });\n            });\n            // add review to reviews store\n            const reviewsStore = db.transaction('reviews', 'readwrite').objectStore('reviews');\n            reviewsStore.put(newReview);\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          }\n        })\n      })\n    })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  const requestUrl = new URL(event.request.url);\n\n  if (requestUrl.origin === location.origin) {\n    const restaurantImagePathRegex = /img\\/[0-9_\\-a-zA-Z]+\\.jpg/;\n    if (restaurantImagePathRegex.test(requestUrl.pathname)) {\n      event.respondWith(serveRestaurantImage(event.request));\n      return;\n    }\n\n    // cache should match index.html to /\n    if (requestUrl.pathname.startsWith('/index.html')) {\n      event.respondWith(caches.match('/')\n        .then(response => response || fetch(event.request)));\n      return;\n    }\n  } else if (requestUrl.origin === 'https://api.tiles.mapbox.com') {\n    event.respondWith(serveMapboxTiles(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request, { ignoreSearch: true }) // ignore search for /restaurant.html?id=X\n      .then(response => response || fetch(event.request)),\n  );\n});\n\nconst serveRestaurantImage = (request) => {\n  // image urls have multiple - and _ for orientation, crop, pixel density and screen size\n  // the relevant part of the url is before the first -\n  const storageUrl = request.url.split('-')[0];\n\n  return caches.open(restaurantImagesCache).then(\n    cache => cache.match(storageUrl).then((response) => {\n      if (response) return response;\n\n      return fetch(request).then((networkResponse) => {\n        cache.put(storageUrl, networkResponse.clone());\n        return networkResponse;\n      }).catch((error) => {\n        console.log(error);\n        // use of offline images inspired by Salah Hamza's stage 1 project\n        // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js\n        if (request.url.includes('wide')) return caches.match('/img/offline_wide.svg');\n        return caches.match('/img/offline.svg');\n      });\n    }),\n  );\n};\n\nconst serveMapboxTiles = request => caches.open(mapboxTilesCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n"]}