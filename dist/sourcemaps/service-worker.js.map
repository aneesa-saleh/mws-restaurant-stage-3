{"version":3,"sources":["service-worker.js"],"names":["importScripts","staticCacheName","restaurantImagesCache","mapboxTilesCache","fontsCache","fontAwesomeCache","self","addEventListener","addAll","event","catch","caches","open","then","cache","waitUntil","clients","dbPromise","review","requestId","outboxStore","error","console","log","keys","Promise","restaurant_id","name","rating","comments","DBHelper","addReview","allCaches","includes","cacheName","delete","type","claim","openDatabase","data","_event$data","forEach","client","postMessage","newReview","request_id","reviewsStore","db","transaction","objectStore","get","request","requestUrl","matchAll","restaurantImagePathRegex","test","respondWith","serveRestaurantImage","origin","serveFonts","serveFontAwesome","response","put","URL","url","pathname","fetch","networkResponse","serveMapboxTiles","match","ignoreSearch","storageUrl","split","clone"],"mappings":"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","file":"../service-worker.js","sourcesContent":["importScripts(\"/js/helpers.js\", \"https://unpkg.com/idb@2.1.3/lib/idb.js\");\n\nconst staticCacheName = \"restaurant-reviews-static-v5\";\nconst restaurantImagesCache = \"restaurant-reviews-restaurant-images\";\nconst mapboxTilesCache = \"restaurant-reviews-map-tiles\";\nconst fontsCache = \"restaurant-reviews-fonts\";\nconst fontAwesomeCache = \"font-awesome\";\nconst allCaches = [\n  staticCacheName,\n  restaurantImagesCache,\n  mapboxTilesCache,\n  fontsCache,\n  fontAwesomeCache,\n];\n\nself.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches\n      .open(staticCacheName)\n      .then((cache) =>\n        cache.addAll([\n          \"/\",\n          \"/restaurant.html\",\n          \"/css/restaurant-details.css\",\n          \"/css/restaurants-list.css\",\n          \"/js/helpers.js\",\n          \"/js/main.js\",\n          \"/js/restaurant_info.js\",\n          \"/img/offline.svg\",\n          \"/img/offline_wide.svg\",\n          \"/img/spinner.gif\",\n          \"/img/restaurant_map_tiny.png\",\n          \"/img/restaurants_map_tiny.png\",\n          \"https://unpkg.com/idb@2.1.3/lib/idb.js\",\n          \"https://use.fontawesome.com/releases/v5.5.0/css/all.css\",\n          \"https://unpkg.com/leaflet@1.3.1/dist/leaflet.css\",\n          \"https://unpkg.com/leaflet@1.3.1/dist/leaflet.js\",\n          \"https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,700\",\n          \"https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png\",\n          \"https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png\",\n          \"https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png\",\n        ])\n      )\n      .catch((error) => console.log(error))\n  );\n});\n\nself.addEventListener(\"activate\", (event) => {\n  // delete the old versions of the cache\n  event.waitUntil(\n    caches\n      .keys()\n      .then((cacheNames) =>\n        Promise.all(\n          cacheNames\n            .filter(\n              (cacheName) =>\n                cacheName.startsWith(\"restaurant-reviews-\") &&\n                !allCaches.includes(cacheName)\n            )\n            .map((cacheName) => caches.delete(cacheName))\n        )\n      )\n      .catch((error) => console.log(error))\n  );\n\n  self.clients.claim();\n});\n\nconst dbPromise = openDatabase(true);\n\nself.addEventListener(\"message\", (event) => {\n  if (event.data.type === \"post-review\") {\n    const { review, requestId } = event.data;\n    dbPromise.then((db) => {\n      const outboxStore = db\n        .transaction(\"outbox\", \"readwrite\")\n        .objectStore(\"outbox\");\n      outboxStore.put({ ...review, request_id: requestId });\n      self.registration.sync.register(requestId);\n    });\n  }\n});\n\nself.addEventListener(\"sync\", (event) => {\n  event.waitUntil(\n    dbPromise.then((db) => {\n      const requestId = event.tag;\n      let outboxStore = db.transaction(\"outbox\").objectStore(\"outbox\");\n      outboxStore.get(requestId).then((request) => {\n        const { restaurant_id, name, rating, comments } = request;\n        return DBHelper.addReview(\n          restaurant_id,\n          name,\n          rating,\n          comments,\n          (error, newReview) => {\n            if (error) {\n              // broadcast update to all clients\n              self.clients.matchAll().then((clients) => {\n                clients.forEach((client) => {\n                  client.postMessage({\n                    type: \"update-review\",\n                    error: true,\n                    requestId,\n                  });\n                });\n              });\n              // delete review from outbox store\n              outboxStore = db\n                .transaction(\"outbox\", \"readwrite\")\n                .objectStore(\"outbox\");\n              outboxStore.delete(requestId);\n            } else {\n              // broadcast update to all clients\n              self.clients.matchAll().then((clients) => {\n                clients.forEach((client) => {\n                  client.postMessage({\n                    type: \"update-review\",\n                    review: newReview,\n                    requestId,\n                  });\n                });\n              });\n              // add review to reviews store\n              const reviewsStore = db\n                .transaction(\"reviews\", \"readwrite\")\n                .objectStore(\"reviews\");\n              reviewsStore.put(newReview);\n              // delete review from outbox store\n              outboxStore = db\n                .transaction(\"outbox\", \"readwrite\")\n                .objectStore(\"outbox\");\n              outboxStore.delete(requestId);\n            }\n          }\n        );\n      });\n    })\n  );\n});\n\nself.addEventListener(\"fetch\", (event) => {\n  const requestUrl = new URL(event.request.url);\n\n  if (requestUrl.origin === location.origin) {\n    const restaurantImagePathRegex = /img\\/[0-9_\\-a-zA-Z]+\\.jpg/;\n    if (restaurantImagePathRegex.test(requestUrl.pathname)) {\n      event.respondWith(serveRestaurantImage(event.request));\n      return;\n    }\n\n    // cache should match index.html to /\n    if (requestUrl.pathname.startsWith(\"/index.html\")) {\n      event.respondWith(\n        caches.match(\"/\").then((response) => response || fetch(event.request))\n      );\n      return;\n    }\n  } else if (requestUrl.origin === \"https://api.tiles.mapbox.com\") {\n    event.respondWith(serveMapboxTiles(event.request));\n    return;\n  } else if (requestUrl.origin === \"https://fonts.gstatic.com\") {\n    event.respondWith(serveFonts(event.request));\n    return;\n  } else if (\n    requestUrl.origin === \"https://use.fontawesome.com\" &&\n    !requestUrl.pathname.endsWith(\".css\")\n  ) {\n    event.respondWith(serveFontAwesome(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches\n      .match(event.request, { ignoreSearch: true }) // ignore search for /restaurant.html?id=X\n      .then((response) => response || fetch(event.request))\n  );\n});\n\nconst serveRestaurantImage = (request) => {\n  // image urls have multiple - and _ for orientation, crop, pixel density and screen size\n  // the relevant part of the url is before the first -\n  const storageUrl = request.url.split(\"-\")[0];\n\n  return caches.open(restaurantImagesCache).then((cache) =>\n    cache.match(storageUrl).then((response) => {\n      if (response) return response;\n\n      return fetch(request)\n        .then((networkResponse) => {\n          cache.put(storageUrl, networkResponse.clone());\n          return networkResponse;\n        })\n        .catch((error) => {\n          console.log(error);\n          // use of offline images inspired by Salah Hamza's stage 1 project\n          // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js\n          if (request.url.includes(\"wide\"))\n            return caches.match(\"/img/offline_wide.svg\");\n          return caches.match(\"/img/offline.svg\");\n        });\n    })\n  );\n};\n\nconst serveMapboxTiles = (request) =>\n  caches.open(mapboxTilesCache).then((cache) =>\n    cache.match(request.url).then((response) => {\n      if (response) return response;\n\n      // if request isn't cached, cache it when fetch response is returned\n      return fetch(request).then((networkResponse) => {\n        cache.put(request.url, networkResponse.clone());\n        return networkResponse;\n      });\n    })\n  );\n\nconst serveFonts = (request) =>\n  caches.open(fontsCache).then((cache) =>\n    cache.match(request.url).then((response) => {\n      if (response) return response;\n\n      // if request isn't cached, cache it when fetch response is returned\n      return fetch(request).then((networkResponse) => {\n        cache.put(request.url, networkResponse.clone());\n        return networkResponse;\n      });\n    })\n  );\n\nconst serveFontAwesome = (request) =>\n  caches.open(fontAwesomeCache).then((cache) =>\n    cache.match(request.url).then((response) => {\n      if (response) return response;\n\n      // if request isn't cached, cache it when fetch response is returned\n      return fetch(request).then((networkResponse) => {\n        cache.put(request.url, networkResponse.clone());\n        return networkResponse;\n      });\n    })\n  );\n"]}