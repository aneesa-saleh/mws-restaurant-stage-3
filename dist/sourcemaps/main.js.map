{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","markers","cuisines","newMap","mapInitialized","document","addEventListener","event","previouslyConnected","navigator","onLine","updateRestaurants","fetchNeighborhoods","registerServiceWorker","setInterval","cleanMapboxTilesCache","window","showConnectionStatus","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","value","append","L","map","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","initMap","addTo","cIndex","cSelect","selectedIndex","nIndex","nSelect","bind","ø","fetchRestaurantByCuisineAndNeighborhood","requestAnimationFrame","addMarkersToMap","resetRestaurants","marker","remove","ul","restaurant","createRestaurantHTML","registerObserver","querySelectorAll","loadPicture","picture","_picture$dataset","fillRestaurantsHTML","src","srcset","srcsetSmall","srcset_small","srcsetMedium","srcset_medium","querySelector","sourceSmall","alt","img","dataset","sourceMedium","media","setAttribute","imageUrlForRestaurant","size","appendChild","image","classList","add","singleValue","name","span","address","more","urlForRestaurant","article","mapMarkerForRestaurant","on","location","href","options","url","push","enqueueToast","onClick"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants;\nlet neighborhoods;\nlet cuisines;\nlet newMap;\nconst markers = [];\nlet mapInitialized = false;\nlet previouslyConnected;\nconst ø = Object.create(null);\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  previouslyConnected = navigator.onLine;\n  updateRestaurants();\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n\n  if ('onLine' in navigator) {\n    window.addEventListener('online', showConnectionStatus);\n    window.addEventListener('offline', showConnectionStatus);\n    requestAnimationFrame(showConnectionStatus);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  self.newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false,\n  });\n  const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: MAPBOX_API_KEY,\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n      + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n      + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets',\n  }).addTo(newMap);\n  mapInitialized = true;\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      requestAnimationFrame(fillRestaurantsHTML.bind(ø, restaurants));\n      if (!mapInitialized) {\n        requestAnimationFrame(initMap);\n      }\n      requestAnimationFrame(addMarkersToMap.bind(ø, restaurants));\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  resetRestaurants(restaurants);\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant) => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  // register observer after the picture elements have been loaded\n  registerObserver(document.querySelectorAll('#restaurants-list picture'), loadPicture);\n};\n\nfunction loadPicture(picture) {\n  const {\n    src, srcset, srcset_small: srcsetSmall, srcset_medium: srcsetMedium,\n  } = picture.dataset;\n\n  const sourceMedium = picture.querySelector('source[data-size=\"medium\"]');\n  const sourceSmall = picture.querySelector('source[data-size=\"small\"]');\n  const img = picture.querySelector('img');\n\n  const { alt } = img.dataset;\n\n  sourceMedium.srcset = srcsetMedium;\n  sourceSmall.srcset = srcsetSmall;\n\n  img.srcset = srcset;\n  img.src = src;\n\n  img.setAttribute('aria-busy', 'false');\n  img.alt = alt;\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const article = document.createElement('article');\n\n  // for picture element, we leave src and srcset attributes of the source and image elements empty\n  // IntersectionObserver will be used to lazy load the images by setting their src and srcset\n  // as they enter the viewport\n  const picture = document.createElement('picture');\n\n  // a two-column layout is used for larger viewports\n  // medium images are displayed for wide single-column (451px - 749px) and wide 2-column viewports (>= 950px)\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 451px) and (max-width: 749px), (min-width: 950px)';\n  sourceMedium.type = 'image/jpeg';\n  sourceMedium.setAttribute('data-size', 'medium');\n  picture.setAttribute('data-srcset_medium', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.appendChild(sourceMedium);\n\n  // small images are displayed for small single-column (<= 450px) and small 2-column viewports (750px - 949px)\n  const sourceSmall = document.createElement('source');\n  sourceSmall.media = '(max-width: 450px), (min-width: 750px) and (max-width: 949px)';\n  sourceSmall.type = 'image/jpeg';\n  sourceSmall.setAttribute('data-size', 'small');\n  picture.setAttribute('data-srcset_small', DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' }));\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.classList.add('restaurant-img');\n  // set default size in case picture element is not supported\n  picture.setAttribute('data-srcset', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium', singleValue: true }));\n  image.setAttribute('data-alt', restaurant.alt);\n  image.setAttribute('aria-busy', 'true');\n  image.alt = '';\n\n  picture.appendChild(image);\n\n  article.append(picture);\n\n  const span = document.createElement('span');\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  span.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  span.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  span.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', `View Details of ${restaurant.name}`);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  span.append(more);\n\n  article.append(span);\n\n  return article;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n\nfunction showConnectionStatus() {\n  if (navigator.onLine && !previouslyConnected) { // user came back online\n    enqueueToast('You are back online', 'success');\n  } else if (!navigator.onLine && previouslyConnected) { // user went offline\n    enqueueToast('You are offline', 'error');\n  }\n\n  previouslyConnected = navigator.onLine;\n}\n"]}