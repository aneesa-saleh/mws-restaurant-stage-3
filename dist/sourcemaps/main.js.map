{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","newMap","markers","create","document","addEventListener","event","updateRestaurants","fetchNeighborhoods","fetchCuisines","registerServiceWorker","DBHelper","error","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","console","fillCuisinesHTML","cuisine","value","append","initMap","scrollWheelZoom","L","tileLayer","mapboxToken","maxZoom","attribution","center","zoom","id","cSelect","addTo","cIndex","selectedIndex","nIndex","nSelect","bind","ø","requestAnimationFrame","addMarkersToMap","resetRestaurants","marker","remove","ul","restaurant","createRestaurantHTML","querySelectorAll","loadPicture","picture","_picture$dataset","dataset","src","srcset","srcsetSmall","srcset_small","srcsetMedium","srcset_medium","fillRestaurantsHTML","querySelector","sourceMedium","registerObserver","img","alt","media","type","article","imageUrlForRestaurant","size","appendChild","sourceSmall","setAttribute","classList","add","singleValue","image","name","address","more","span","concat","urlForRestaurant","mapMarkerForRestaurant","on","window","location","href","options","url","push"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants = [];\nlet neighborhoods = [];\nlet cuisines = [];\nlet newMap;\nconst markers = [];\nlet mapInitialized = false;\nconst ø = Object.create(null);\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  updateRestaurants();\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  self.newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false,\n  });\n  const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: MAPBOX_API_KEY,\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n      + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n      + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets',\n  }).addTo(newMap);\n  mapInitialized = true;\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      requestAnimationFrame(fillRestaurantsHTML.bind(ø, restaurants));\n      if (!mapInitialized) {\n        requestAnimationFrame(initMap);\n      }\n      requestAnimationFrame(addMarkersToMap.bind(ø, restaurants));\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  resetRestaurants(restaurants);\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant) => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  registerObserver(document.querySelectorAll('#restaurants-list picture'), loadPicture);\n};\n\nfunction loadPicture(picture) {\n  const {\n    src, srcset, srcset_small: srcsetSmall, srcset_medium: srcsetMedium,\n  } = picture.dataset;\n\n  const sourceMedium = picture.querySelector('source[data-size=\"medium\"]');\n  const sourceSmall = picture.querySelector('source[data-size=\"small\"]');\n  const img = picture.querySelector('img');\n\n  const { alt } = img.dataset;\n\n  sourceMedium.srcset = srcsetMedium;\n  sourceSmall.srcset = srcsetSmall;\n\n  img.srcset = srcset;\n  img.src = src;\n\n  img.setAttribute('aria-busy', 'false');\n  img.alt = alt;\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const article = document.createElement('article');\n\n  // for picture element, we leave src and srcset attributes of the source and image elements empty\n  // IntersectionObserver will be used to lazy load the images by setting their src and srcset\n  // as they enter the viewport\n  const picture = document.createElement('picture');\n\n  // a two-column layout is used for larger viewports\n  // medium images are displayed for wide single-column (451px - 749px) and wide 2-column viewports (>= 950px)\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 451px) and (max-width: 749px), (min-width: 950px)';\n  sourceMedium.type = 'image/jpeg';\n  sourceMedium.setAttribute('data-size', 'medium');\n  picture.setAttribute('data-srcset_medium', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.appendChild(sourceMedium);\n\n  // small images are displayed for small single-column (<= 450px) and small 2-column viewports (750px - 949px)\n  const sourceSmall = document.createElement('source');\n  sourceSmall.media = '(max-width: 450px), (min-width: 750px) and (max-width: 949px)';\n  sourceSmall.type = 'image/jpeg';\n  sourceSmall.setAttribute('data-size', 'small');\n  picture.setAttribute('data-srcset_small', DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' }));\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.classList.add('restaurant-img');\n  // set default size in case picture element is not supported\n  picture.setAttribute('data-srcset', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium', singleValue: true }));\n  image.setAttribute('data-alt', restaurant.alt);\n  image.setAttribute('aria-busy', 'true');\n  image.alt = '';\n\n  picture.appendChild(image);\n\n  article.append(picture);\n\n  const span = document.createElement('span');\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  span.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  span.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  span.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', `View Details of ${restaurant.name}`);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  span.append(more);\n\n  article.append(span);\n\n  return article;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n"]}