{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","newMap","document","addEventListener","event","L","map","center","updateRestaurants","fetchNeighborhoods","fetchCuisines","window","caches","setInterval","DBHelper","error","console","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","forEach","neighborhood","createElement","option","fillCuisinesHTML","cuisine","innerHTML","value","append","cSelect","nSelect","cIndex","selectedIndex","nIndex","initMap","markers","resetRestaurants","marker","ul","fillRestaurantsHTML","restaurant","createRestaurantHTML","registerObserver","querySelectorAll","loadPicture","addMarkersToMap","picture","_picture$dataset","srcsetSmall","srcsetMedium","querySelector","img","dataset","sourceMedium","srcset","sourceSmall","src","media","type","setAttribute","imageUrlForRestaurant","size","appendChild","image","classList","add","singleValue","alt","name","article","address","span","more","concat","mapMarkerForRestaurant","on","location","href","options","url","push"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants;\nlet neighborhoods;\nlet cuisines;\nlet newMap;\nconst markers = [];\nlet mapInitialized = false;\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false,\n  });\n\n  updateRestaurants();\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  mapInitialized = true;\n  const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n  // L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n  //   mapboxToken: MAPBOX_API_KEY,\n  //   maxZoom: 18,\n  //   attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n  //     + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n  //     + 'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n  //   id: 'mapbox.streets',\n  // }).addTo(newMap);\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n\n  if (!mapInitialized) {\n    initMap();\n  }\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant) => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  registerObserver(document.querySelectorAll('#restaurants-list picture'), loadPicture);\n  addMarkersToMap();\n};\n\nfunction loadPicture(picture) {\n  const {\n    src, srcset, srcset_small: srcsetSmall, srcset_medium: srcsetMedium,\n  } = picture.dataset;\n\n  const sourceMedium = picture.querySelector('source[data-size=\"medium\"]');\n  const sourceSmall = picture.querySelector('source[data-size=\"small\"]');\n  const img = picture.querySelector('img');\n\n  const { alt } = img.dataset;\n\n  sourceMedium.srcset = srcsetMedium;\n  sourceSmall.srcset = srcsetSmall;\n\n  img.srcset = srcset;\n  img.src = src;\n\n  img.setAttribute('aria-busy', 'false');\n  img.alt = alt;\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const article = document.createElement('article');\n\n  // for picture element, we leave src and srcset attributes of the source and image elements empty\n  // IntersectionObserver will be used to lazy load the images by setting their src and srcset\n  // as they enter the viewport\n  const picture = document.createElement('picture');\n\n  // a two-column layout is used for larger viewports\n  // medium images are displayed for wide single-column (451px - 749px) and wide 2-column viewports (>= 950px)\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 451px) and (max-width: 749px), (min-width: 950px)';\n  sourceMedium.type = 'image/jpeg';\n  sourceMedium.setAttribute('data-size', 'medium');\n  picture.setAttribute('data-srcset_medium', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.appendChild(sourceMedium);\n\n  // small images are displayed for small single-column (<= 450px) and small 2-column viewports (750px - 949px)\n  const sourceSmall = document.createElement('source');\n  sourceSmall.media = '(max-width: 450px), (min-width: 750px) and (max-width: 949px)';\n  sourceSmall.type = 'image/jpeg';\n  sourceSmall.setAttribute('data-size', 'small');\n  picture.setAttribute('data-srcset_small', DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' }));\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.classList.add('restaurant-img');\n  // set default size in case picture element is not supported\n  picture.setAttribute('data-srcset', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium', singleValue: true }));\n  image.setAttribute('data-alt', restaurant.alt);\n  image.setAttribute('aria-busy', 'true');\n  image.alt = '';\n\n  picture.appendChild(image);\n\n  article.append(picture);\n\n  const span = document.createElement('span');\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  span.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  span.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  span.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', `View Details of ${restaurant.name}`);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  span.append(more);\n\n  article.append(span);\n\n  return article;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n"]}