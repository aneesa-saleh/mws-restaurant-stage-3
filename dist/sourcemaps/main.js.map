{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","document","addEventListener","event","initMap","fetchNeighborhoods","registerServiceWorker","setInterval","cleanMapboxTilesCache","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","value","append","center","zoom","scrollWheelZoom","L","tileLayer","mapboxToken","maxZoom","newMap","updateRestaurants","addTo","nSelect","cIndex","cSelect","selectedIndex","nIndex","resetRestaurants","markers","marker","remove","ul","fillRestaurantsHTML","restaurant","registerObserver","querySelectorAll","loadPicture","addMarkersToMap","picture","_picture$dataset","src","srcsetSmall","srcset_small","srcsetMedium","srcset_medium","createRestaurantHTML","sourceSmall","querySelector","alt","img","dataset","sourceMedium","srcset","setAttribute","article","media","type","imageUrlForRestaurant","size","appendChild","image","add","singleValue","span","name","address","more","mapMarkerForRestaurant","on","href"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants;\nlet neighborhoods;\nlet cuisines;\nlet newMap;\nconst markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap();\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n  self.newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false,\n  });\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: MAPBOX_API_KEY,\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n      + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n      + 'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets',\n  }).addTo(newMap);\n\n  updateRestaurants();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant) => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  registerObserver(document.querySelectorAll('#restaurants-list picture'), loadPicture);\n  addMarkersToMap();\n};\n\nfunction loadPicture(picture) {\n  const {\n    src, srcset, srcset_small: srcsetSmall, srcset_medium: srcsetMedium,\n  } = picture.dataset;\n\n  const sourceMedium = picture.querySelector('source[data-size=\"medium\"]');\n  const sourceSmall = picture.querySelector('source[data-size=\"small\"]');\n  const img = picture.querySelector('img');\n\n  const { alt } = img.dataset;\n\n  sourceMedium.srcset = srcsetMedium;\n  sourceSmall.srcset = srcsetSmall;\n\n  img.srcset = srcset;\n  img.src = src;\n\n  img.setAttribute('aria-busy', 'false');\n  img.alt = alt;\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const article = document.createElement('article');\n\n  // for picture element, we leave src and srcset attributes of the source and image elements empty\n  // IntersectionObserver will be used to lazy load the images by setting their src and srcset\n  // as they enter the viewport\n  const picture = document.createElement('picture');\n\n  // a two-column layout is used for larger viewports\n  // medium images are displayed for wide single-column (451px - 749px) and wide 2-column viewports (>= 950px)\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 451px) and (max-width: 749px), (min-width: 950px)';\n  sourceMedium.type = 'image/jpeg';\n  sourceMedium.setAttribute('data-size', 'medium');\n  picture.setAttribute('data-srcset_medium', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.appendChild(sourceMedium);\n\n  // small images are displayed for small single-column (<= 450px) and small 2-column viewports (750px - 949px)\n  const sourceSmall = document.createElement('source');\n  sourceSmall.media = '(max-width: 450px), (min-width: 750px) and (max-width: 949px)';\n  sourceSmall.type = 'image/jpeg';\n  sourceSmall.setAttribute('data-size', 'small');\n  picture.setAttribute('data-srcset_small', DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' }));\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.classList.add('restaurant-img');\n  // set default size in case picture element is not supported\n  picture.setAttribute('data-srcset', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium', singleValue: true }));\n  image.setAttribute('data-alt', restaurant.alt);\n  image.setAttribute('aria-busy', 'true');\n  image.alt = '';\n\n  picture.appendChild(image);\n\n  article.append(picture);\n\n  const span = document.createElement('span');\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  span.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  span.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  span.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', `View Details of ${restaurant.name}`);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  span.append(more);\n\n  article.append(span);\n\n  return article;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n"]}