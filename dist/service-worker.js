"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

importScripts('/js/swhelper.js', '/js/dbhelper.js', 'https://cdn.jsdelivr.net/npm/idb@2.1.3/lib/idb.min.js');
var staticCacheName = 'restaurant-reviews-static-v5';
var restaurantImagesCache = 'restaurant-reviews-restaurant-images';
var mapboxTilesCache = 'restaurant-reviews-map-tiles';
var allCaches = [staticCacheName, restaurantImagesCache, mapboxTilesCache];
self.addEventListener('install', function (event) {
  event.waitUntil(caches.open(staticCacheName).then(function (cache) {
    return cache.addAll(['/', '/restaurant.html', '/css/restaurant-details.css', '/css/restaurants-list.css', '/js/dbhelper.js', '/js/swhelper.js', '/js/main.js', '/js/restaurant_info.js', '/img/offline.svg', '/img/offline_wide.svg', '/img/spinner.gif', 'https://cdn.rawgit.com/jakearchibald/idb/master/lib/idb.js', 'https://use.fontawesome.com/releases/v5.5.0/css/all.css', 'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css', 'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js', 'https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png']);
  }).catch(function (error) {
    return console.log(error);
  }));
});
self.addEventListener('activate', function (event) {
  // delete the old versions of the cache
  event.waitUntil(caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.filter(function (cacheName) {
      return cacheName.startsWith('restaurant-reviews-') && !allCaches.includes(cacheName);
    }).map(function (cacheName) {
      return caches.delete(cacheName);
    }));
  }).catch(function (error) {
    return console.log(error);
  }));
  self.clients.claim();
});
var dbPromise = openDatabase(true);
self.addEventListener('message', function (event) {
  if (event.data.type === 'post-review') {
    var _event$data = event.data,
        review = _event$data.review,
        requestId = _event$data.requestId;
    dbPromise.then(function (db) {
      var outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');
      outboxStore.put(_objectSpread({}, review, {
        request_id: requestId
      }));
      self.registration.sync.register(requestId);
    });
  }
});
self.addEventListener('sync', function (event) {
  event.waitUntil(dbPromise.then(function (db) {
    var requestId = event.tag;
    var outboxStore = db.transaction('outbox').objectStore('outbox');
    outboxStore.get(requestId).then(function (request) {
      var restaurant_id = request.restaurant_id,
          name = request.name,
          rating = request.rating,
          comments = request.comments;
      return DBHelper.addReview(restaurant_id, name, rating, comments, function (error, newReview) {
        if (error) {
          // broadcast update to all clients
          self.clients.matchAll().then(function (clients) {
            clients.forEach(function (client) {
              client.postMessage({
                type: 'update-review',
                error: true,
                requestId: requestId
              });
            });
          }); // delete review from outbox store

          outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');
          outboxStore.delete(requestId);
        } else {
          // broadcast update to all clients
          self.clients.matchAll().then(function (clients) {
            clients.forEach(function (client) {
              client.postMessage({
                type: 'update-review',
                review: newReview,
                requestId: requestId
              });
            });
          }); // add review to reviews store

          var reviewsStore = db.transaction('reviews', 'readwrite').objectStore('reviews');
          reviewsStore.put(newReview); // delete review from outbox store

          outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');
          outboxStore.delete(requestId);
        }
      });
    });
  }));
});
self.addEventListener('fetch', function (event) {
  var requestUrl = new URL(event.request.url);

  if (requestUrl.origin === location.origin) {
    var restaurantImagePathRegex = /img\/[0-9_\-a-zA-Z]+\.jpg/;

    if (restaurantImagePathRegex.test(requestUrl.pathname)) {
      event.respondWith(serveRestaurantImage(event.request));
      return;
    } // cache should match index.html to /


    if (requestUrl.pathname.startsWith('/index.html')) {
      event.respondWith(caches.match('/').then(function (response) {
        return response || fetch(event.request);
      }));
      return;
    }
  } else if (requestUrl.origin === 'https://api.tiles.mapbox.com') {
    event.respondWith(serveMapboxTiles(event.request));
    return;
  }

  event.respondWith(caches.match(event.request, {
    ignoreSearch: true
  }) // ignore search for /restaurant.html?id=X
  .then(function (response) {
    return response || fetch(event.request);
  }));
});

var serveRestaurantImage = function serveRestaurantImage(request) {
  // image urls have multiple - and _ for orientation, crop, pixel density and screen size
  // the relevant part of the url is before the first -
  var storageUrl = request.url.split('-')[0];
  return caches.open(restaurantImagesCache).then(function (cache) {
    return cache.match(storageUrl).then(function (response) {
      if (response) return response;
      return fetch(request).then(function (networkResponse) {
        cache.put(storageUrl, networkResponse.clone());
        return networkResponse;
      }).catch(function (error) {
        console.log(error); // use of offline images inspired by Salah Hamza's stage 1 project
        // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js

        if (request.url.includes('wide')) return caches.match('/img/offline_wide.svg');
        return caches.match('/img/offline.svg');
      });
    });
  });
};

var serveMapboxTiles = function serveMapboxTiles(request) {
  return caches.open(mapboxTilesCache).then(function (cache) {
    return cache.match(request.url).then(function (response) {
      if (response) return response; // if request isn't cached, cache it when fetch response is returned

      return fetch(request).then(function (networkResponse) {
        cache.put(request.url, networkResponse.clone());
        return networkResponse;
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
