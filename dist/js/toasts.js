"use strict";

var toastTimer = null;
var pendingToasts = [];
var shouldRestartToastTimer = false;

function pauseToastTimer() {
  clearTimeout(toastTimer);
  toastTimer = null;
  shouldRestartToastTimer = true;
}

function restartToastTimer() {
  if (shouldRestartToastTimer) {
    shouldRestartToastTimer = false;
    setTimeout(hideToast, 2000);
  }
}

function enqueueToast(message, type) {
  // add the toast to the beginning of the array (queue)
  pendingToasts.unshift({
    message: message,
    type: type
  });

  if (toastTimer === null) {
    // no toast is currently showing
    showToast();
  }
}

function hideToast() {
  clearTimeout(toastTimer);
  toastTimer = null;
  shouldRestartToastTimer = false;
  var toast = document.getElementById('toast');
  var toastText = document.getElementById('toast-text');
  toast.classList.remove('show');
  setTimeout(function () {
    toastText.setAttribute('aria-live', 'polite'); // show the next toast if there is any pending

    showToast();
  }, 0);
}

function showToast() {
  var toast = pendingToasts.pop();
  if (!toast || !toast.message) return;
  var message = toast.message,
      type = toast.type;
  var toastElement = document.getElementById('toast');
  var toastText = document.getElementById('toast-text');
  var toastIcon = document.getElementById('toast-icon');
  toastText.setAttribute('aria-live', 'polite');
  toastText.innerHTML = message;

  if (type === 'error') {
    toastElement.className = 'toast show error';
    toastIcon.className = 'fas fa-exclamation-triangle';
  } else if (type === 'success') {
    toastElement.className = 'toast show success';
    toastIcon.className = 'fas fa-check';
  } else {
    toastElement.className = 'toast show';
    toastIcon.className = 'fas fa-info-circle';
  }

  clearTimeout(toastTimer);
  setTimeout(function () {
    toastText.setAttribute('aria-live', 'off');
  }, 0);
  toastTimer = setTimeout(hideToast, 10000);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvYXN0cy5qcyJdLCJuYW1lcyI6WyJ0b2FzdFRpbWVyIiwicGVuZGluZ1RvYXN0cyIsInNob3VsZFJlc3RhcnRUb2FzdFRpbWVyIiwicGF1c2VUb2FzdFRpbWVyIiwiY2xlYXJUaW1lb3V0IiwicmVzdGFydFRvYXN0VGltZXIiLCJzZXRUaW1lb3V0IiwiaGlkZVRvYXN0IiwiZW5xdWV1ZVRvYXN0IiwibWVzc2FnZSIsInR5cGUiLCJ1bnNoaWZ0Iiwic2hvd1RvYXN0IiwidG9hc3QiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9hc3RUZXh0IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2V0QXR0cmlidXRlIiwicG9wIiwidG9hc3RFbGVtZW50IiwidG9hc3RJY29uIiwiaW5uZXJIVE1MIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFVBQVUsR0FBRyxJQUFqQjtBQUNBLElBQU1DLGFBQWEsR0FBRyxFQUF0QjtBQUNBLElBQUlDLHVCQUF1QixHQUFHLEtBQTlCOztBQUVBLFNBQVNDLGVBQVQsR0FBMkI7QUFDekJDLEVBQUFBLFlBQVksQ0FBQ0osVUFBRCxDQUFaO0FBQ0FBLEVBQUFBLFVBQVUsR0FBRyxJQUFiO0FBQ0FFLEVBQUFBLHVCQUF1QixHQUFHLElBQTFCO0FBQ0Q7O0FBRUQsU0FBU0csaUJBQVQsR0FBNkI7QUFDM0IsTUFBSUgsdUJBQUosRUFBNkI7QUFDM0JBLElBQUFBLHVCQUF1QixHQUFHLEtBQTFCO0FBQ0FJLElBQUFBLFVBQVUsQ0FBQ0MsU0FBRCxFQUFZLElBQVosQ0FBVjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQkMsT0FBdEIsRUFBK0JDLElBQS9CLEVBQXFDO0FBQ25DO0FBQ0FULEVBQUFBLGFBQWEsQ0FBQ1UsT0FBZCxDQUFzQjtBQUFFRixJQUFBQSxPQUFPLEVBQVBBLE9BQUY7QUFBV0MsSUFBQUEsSUFBSSxFQUFKQTtBQUFYLEdBQXRCOztBQUNBLE1BQUlWLFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUFFO0FBQ3pCWSxJQUFBQSxTQUFTO0FBQ1Y7QUFDRjs7QUFFRCxTQUFTTCxTQUFULEdBQXFCO0FBQ25CSCxFQUFBQSxZQUFZLENBQUNKLFVBQUQsQ0FBWjtBQUNBQSxFQUFBQSxVQUFVLEdBQUcsSUFBYjtBQUNBRSxFQUFBQSx1QkFBdUIsR0FBRyxLQUExQjtBQUNBLE1BQU1XLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLE9BQXhCLENBQWQ7QUFDQSxNQUFNQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixZQUF4QixDQUFsQjtBQUNBRixFQUFBQSxLQUFLLENBQUNJLFNBQU4sQ0FBZ0JDLE1BQWhCLENBQXVCLE1BQXZCO0FBQ0FaLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZVLElBQUFBLFNBQVMsQ0FBQ0csWUFBVixDQUF1QixXQUF2QixFQUFvQyxRQUFwQyxFQURlLENBRWY7O0FBQ0FQLElBQUFBLFNBQVM7QUFDVixHQUpTLEVBSVAsQ0FKTyxDQUFWO0FBS0Q7O0FBRUQsU0FBU0EsU0FBVCxHQUFxQjtBQUNuQixNQUFNQyxLQUFLLEdBQUdaLGFBQWEsQ0FBQ21CLEdBQWQsRUFBZDtBQUNBLE1BQUksQ0FBQ1AsS0FBRCxJQUFVLENBQUNBLEtBQUssQ0FBQ0osT0FBckIsRUFBOEI7QUFGWCxNQUlYQSxPQUpXLEdBSU9JLEtBSlAsQ0FJWEosT0FKVztBQUFBLE1BSUZDLElBSkUsR0FJT0csS0FKUCxDQUlGSCxJQUpFO0FBS25CLE1BQU1XLFlBQVksR0FBR1AsUUFBUSxDQUFDQyxjQUFULENBQXdCLE9BQXhCLENBQXJCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBbEI7QUFDQSxNQUFNTyxTQUFTLEdBQUdSLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixZQUF4QixDQUFsQjtBQUVBQyxFQUFBQSxTQUFTLENBQUNHLFlBQVYsQ0FBdUIsV0FBdkIsRUFBb0MsUUFBcEM7QUFDQUgsRUFBQUEsU0FBUyxDQUFDTyxTQUFWLEdBQXNCZCxPQUF0Qjs7QUFFQSxNQUFJQyxJQUFJLEtBQUssT0FBYixFQUFzQjtBQUNwQlcsSUFBQUEsWUFBWSxDQUFDRyxTQUFiLEdBQXlCLGtCQUF6QjtBQUNBRixJQUFBQSxTQUFTLENBQUNFLFNBQVYsR0FBc0IsNkJBQXRCO0FBQ0QsR0FIRCxNQUdPLElBQUlkLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQzdCVyxJQUFBQSxZQUFZLENBQUNHLFNBQWIsR0FBeUIsb0JBQXpCO0FBQ0FGLElBQUFBLFNBQVMsQ0FBQ0UsU0FBVixHQUFzQixjQUF0QjtBQUNELEdBSE0sTUFHQTtBQUNMSCxJQUFBQSxZQUFZLENBQUNHLFNBQWIsR0FBeUIsWUFBekI7QUFDQUYsSUFBQUEsU0FBUyxDQUFDRSxTQUFWLEdBQXNCLG9CQUF0QjtBQUNEOztBQUVEcEIsRUFBQUEsWUFBWSxDQUFDSixVQUFELENBQVo7QUFDQU0sRUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZlUsSUFBQUEsU0FBUyxDQUFDRyxZQUFWLENBQXVCLFdBQXZCLEVBQW9DLEtBQXBDO0FBQ0QsR0FGUyxFQUVQLENBRk8sQ0FBVjtBQUdBbkIsRUFBQUEsVUFBVSxHQUFHTSxVQUFVLENBQUNDLFNBQUQsRUFBWSxLQUFaLENBQXZCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdG9hc3RUaW1lciA9IG51bGw7XG5jb25zdCBwZW5kaW5nVG9hc3RzID0gW107XG5sZXQgc2hvdWxkUmVzdGFydFRvYXN0VGltZXIgPSBmYWxzZTtcblxuZnVuY3Rpb24gcGF1c2VUb2FzdFRpbWVyKCkge1xuICBjbGVhclRpbWVvdXQodG9hc3RUaW1lcik7XG4gIHRvYXN0VGltZXIgPSBudWxsO1xuICBzaG91bGRSZXN0YXJ0VG9hc3RUaW1lciA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlc3RhcnRUb2FzdFRpbWVyKCkge1xuICBpZiAoc2hvdWxkUmVzdGFydFRvYXN0VGltZXIpIHtcbiAgICBzaG91bGRSZXN0YXJ0VG9hc3RUaW1lciA9IGZhbHNlO1xuICAgIHNldFRpbWVvdXQoaGlkZVRvYXN0LCAyMDAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnF1ZXVlVG9hc3QobWVzc2FnZSwgdHlwZSkge1xuICAvLyBhZGQgdGhlIHRvYXN0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5IChxdWV1ZSlcbiAgcGVuZGluZ1RvYXN0cy51bnNoaWZ0KHsgbWVzc2FnZSwgdHlwZSB9KTtcbiAgaWYgKHRvYXN0VGltZXIgPT09IG51bGwpIHsgLy8gbm8gdG9hc3QgaXMgY3VycmVudGx5IHNob3dpbmdcbiAgICBzaG93VG9hc3QoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoaWRlVG9hc3QoKSB7XG4gIGNsZWFyVGltZW91dCh0b2FzdFRpbWVyKTtcbiAgdG9hc3RUaW1lciA9IG51bGw7XG4gIHNob3VsZFJlc3RhcnRUb2FzdFRpbWVyID0gZmFsc2U7XG4gIGNvbnN0IHRvYXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0Jyk7XG4gIGNvbnN0IHRvYXN0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2FzdC10ZXh0Jyk7XG4gIHRvYXN0LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgdG9hc3RUZXh0LnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgIC8vIHNob3cgdGhlIG5leHQgdG9hc3QgaWYgdGhlcmUgaXMgYW55IHBlbmRpbmdcbiAgICBzaG93VG9hc3QoKTtcbiAgfSwgMCk7XG59XG5cbmZ1bmN0aW9uIHNob3dUb2FzdCgpIHtcbiAgY29uc3QgdG9hc3QgPSBwZW5kaW5nVG9hc3RzLnBvcCgpO1xuICBpZiAoIXRvYXN0IHx8ICF0b2FzdC5tZXNzYWdlKSByZXR1cm47XG5cbiAgY29uc3QgeyBtZXNzYWdlLCB0eXBlIH0gPSB0b2FzdDtcbiAgY29uc3QgdG9hc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0Jyk7XG4gIGNvbnN0IHRvYXN0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2FzdC10ZXh0Jyk7XG4gIGNvbnN0IHRvYXN0SWNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2FzdC1pY29uJyk7XG5cbiAgdG9hc3RUZXh0LnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICB0b2FzdFRleHQuaW5uZXJIVE1MID0gbWVzc2FnZTtcblxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIHRvYXN0RWxlbWVudC5jbGFzc05hbWUgPSAndG9hc3Qgc2hvdyBlcnJvcic7XG4gICAgdG9hc3RJY29uLmNsYXNzTmFtZSA9ICdmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUnO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgIHRvYXN0RWxlbWVudC5jbGFzc05hbWUgPSAndG9hc3Qgc2hvdyBzdWNjZXNzJztcbiAgICB0b2FzdEljb24uY2xhc3NOYW1lID0gJ2ZhcyBmYS1jaGVjayc7XG4gIH0gZWxzZSB7XG4gICAgdG9hc3RFbGVtZW50LmNsYXNzTmFtZSA9ICd0b2FzdCBzaG93JztcbiAgICB0b2FzdEljb24uY2xhc3NOYW1lID0gJ2ZhcyBmYS1pbmZvLWNpcmNsZSc7XG4gIH1cblxuICBjbGVhclRpbWVvdXQodG9hc3RUaW1lcik7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHRvYXN0VGV4dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdvZmYnKTtcbiAgfSwgMCk7XG4gIHRvYXN0VGltZXIgPSBzZXRUaW1lb3V0KGhpZGVUb2FzdCwgMTAwMDApO1xufVxuIl0sImZpbGUiOiJ0b2FzdHMuanMifQ==
