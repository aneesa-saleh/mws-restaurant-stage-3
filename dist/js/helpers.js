"use strict";var registerServiceWorker=function(){navigator.serviceWorker&&navigator.serviceWorker.register("/service-worker.js").catch(function(t){return console.log(t)})},cleanMapboxTilesCache=function(){caches.open("restaurant-reviews-map-tiles").then(function(n){return n.keys().then(function(t){var e=t.length;e<=12||t.slice(0,e-12).forEach(function(t){n.delete(t)})})})},openDatabase=function(t){return navigator.serviceWorker||t?idb.open("restaurant-reviews",4,function(t){switch(t.oldVersion){case 0:t.createObjectStore("restaurants",{keyPath:"id"});case 1:t.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");case 2:t.createObjectStore("outbox",{keyPath:"request_id"});case 3:t.transaction.objectStore("outbox").createIndex("restaurant_id","restaurant_id")}}):Promise.resolve()};function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var dbPromise=openDatabase(),DBHelper=function(){function s(){_classCallCheck(this,s)}return _createClass(s,null,[{key:"fetchRestaurants",value:function(){return dbPromise.then(function(n){var r="".concat(s.DATABASE_URL,"/restaurants");if(!n)return fetch(r).then(function(t){if(t.ok)return t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});var a=n.transaction("restaurants").objectStore("restaurants");return a.getAll().then(function(t){var e=fetch(r).then(function(t){if(t.ok)return t.clone().json().then(function(t){a=n.transaction("restaurants","readwrite").objectStore("restaurants"),t.forEach(function(t){a.put(t)})}),t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});return t&&0<t.length?t:e})})}},{key:"fetchRestaurantById",value:function(t,e){dbPromise.then(function(n){var r="".concat(s.DATABASE_URL,"/restaurants/").concat(t);if(!n)return fetch(r).then(function(t){if(t.ok)return t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});var a=n.transaction("restaurants").objectStore("restaurants");return a.get(Number.parseInt(t,10)).then(function(t){var e=fetch(r).then(function(t){if(t.ok)return t.clone().json().then(function(t){(a=n.transaction("restaurants","readwrite").objectStore("restaurants")).put(t)}),t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});return t||e})}).then(function(t){e(null,t)}).catch(function(t){e(t,null)})}},{key:"fetchReviewsByRestaurantId",value:function(t,e){dbPromise.then(function(n){var r="".concat(s.DATABASE_URL,"/reviews/?restaurant_id=").concat(t);if(!n)return fetch(r).then(function(t){if(t.ok)return t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});var a=n.transaction("reviews").objectStore("reviews");return a.index("restaurant_id").getAll(Number.parseInt(t,10)).then(function(t){var e=fetch(r).then(function(t){if(t.ok)return t.clone().json().then(function(t){a=n.transaction("reviews","readwrite").objectStore("reviews"),t.forEach(function(t){a.put(t)})}),t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)});return t&&0<t.length?t:e})}).then(function(t){e(null,t)}).catch(function(t){e(t,null)})}},{key:"fetchRestaurantByCuisine",value:function(n,r){s.fetchRestaurants().then(function(t){var e=t.filter(function(t){return t.cuisine_type==n});r(null,e)}).catch(function(t){r(t,null)})}},{key:"fetchRestaurantByNeighborhood",value:function(n,r){s.fetchRestaurants().then(function(t){var e=t.filter(function(t){return t.neighborhood==n});r(null,e)}).catch(function(t){r(t,null)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r,a){s.fetchRestaurants().then(function(t){var e=t;"all"!=n&&(e=e.filter(function(t){return t.cuisine_type==n})),"all"!=r&&(e=e.filter(function(t){return t.neighborhood==r})),a(null,e)}).catch(function(t){a(t,null)})}},{key:"fetchNeighborhoods",value:function(e){s.fetchRestaurants().then(function(n){var r=n.map(function(t,e){return n[e].neighborhood}),t=r.filter(function(t,e){return r.indexOf(t)==e});e(null,t)}).catch(function(t){e(t,null)})}},{key:"fetchCuisines",value:function(e){s.fetchRestaurants().then(function(n){var r=n.map(function(t,e){return n[e].cuisine_type}),t=r.filter(function(t,e){return r.indexOf(t)==e});e(null,t)}).catch(function(t){e(t,null)})}},{key:"urlForRestaurant",value:function(t){return"./restaurant.html?id=".concat(t.id)}},{key:"imageUrlForRestaurant",value:function(t,e){if(e){if("small"===e.size)return!0===e.singleValue?"img/".concat(t.photograph_small_2x):"img/".concat(t.photograph_small_1x," 1x, img/").concat(t.photograph_small_2x," 2x");if("medium"===e.size)return!0===e.singleValue?"img/".concat(t.photograph_medium_2x):"img/".concat(t.photograph_medium_1x," 1x, img/").concat(t.photograph_medium_2x," 2x");if("large"===e.size&&e.wide)return"img/".concat(t.photograph_large_wide)}return"img/".concat(t.photograph_large)}},{key:"mapMarkerForRestaurant",value:function(t,e){var n=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:s.urlForRestaurant(t)});return n.addTo(newMap),n}},{key:"setRestaurantFavouriteStatus",value:function(t,e,n){var r="".concat(s.DATABASE_URL,"/restaurants/").concat(t,"/?is_favorite=").concat(e);fetch(r,{method:"PUT"}).then(function(t){return t.ok?t.json():Promise.reject()}).then(function(e){dbPromise.then(function(t){t.transaction("restaurants","readwrite").objectStore("restaurants").put(e)}),n(null,e)}).catch(function(t){n(t,null)})}},{key:"addReview",value:function(t,e,n,r,a){var o="".concat(s.DATABASE_URL,"/reviews"),u=JSON.stringify({restaurant_id:t,name:e,rating:n,comments:r});fetch(o,{method:"POST",body:u}).then(function(t){if(t.ok)return t.json();var e="Request failed. Returned status of ".concat(t.status);return Promise.reject(e)}).then(function(t){a(null,t)}).catch(function(t){a(t,null)})}},{key:"getOutboxReviews",value:function(e,n){dbPromise.then(function(t){if(t){t.transaction("outbox").objectStore("outbox").index("restaurant_id").getAll(Number.parseInt(e,10)).then(function(t){n(null,t)})}else{n("Error connecting to IndexedDB",null)}})}},{key:"DATABASE_URL",get:function(){return"http://localhost:".concat(1337)}}]),s}();function formatDate(t){var e=t.getDate(),n=["January","February","March","April","May","June","July","August","September","October","November","December"][t.getMonth()],r=t.getFullYear();return"".concat(n," ").concat(e,", ").concat(r)}function stringToBoolean(t){return"boolean"==typeof t?t:"true"===t}var toastTimer=null,pendingToasts=[],shouldRestartToastTimer=!1;function pauseToastTimer(){clearTimeout(toastTimer),shouldRestartToastTimer=!(toastTimer=null)}function restartToastTimer(){shouldRestartToastTimer&&(shouldRestartToastTimer=!1,toastTimer=setTimeout(hideToast,2e3))}function enqueueToast(t,e){pendingToasts.unshift({message:t,type:e}),null===toastTimer&&showToast()}function hideToast(){clearTimeout(toastTimer),toastTimer=null,shouldRestartToastTimer=!1;var t=document.getElementById("toast"),e=document.getElementById("toast-text");t.classList.remove("show"),setTimeout(function(){e.setAttribute("aria-live","polite"),showToast()},0)}function showToast(){var t=pendingToasts.pop();if(t&&t.message){var e=t.message,n=t.type,r=document.getElementById("toast"),a=document.getElementById("toast-text"),o=document.getElementById("toast-icon");a.setAttribute("aria-live","polite"),a.innerHTML=e,o.className="error"===n?(r.className="toast show error","fas fa-exclamation-triangle"):"success"===n?(r.className="toast show success","fas fa-check"):(r.className="toast show","fas fa-info-circle"),clearTimeout(toastTimer),setTimeout(function(){a.setAttribute("aria-live","off")},0),toastTimer=setTimeout(hideToast,1e4)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3aGVscGVyLmpzIiwiZGJoZWxwZXIuanMiLCJtaXNjaGVscGVycy5qcyIsInRvYXN0cy5qcyJdLCJuYW1lcyI6WyJyZWdpc3RlclNlcnZpY2VXb3JrZXIiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImNsZWFuTWFwYm94VGlsZXNDYWNoZSIsImNhY2hlcyIsIm9wZW4iLCJ0aGVuIiwiY2FjaGUiLCJrZXlzIiwicmVxdWVzdHMiLCJsZW5ndGgiLCJzbGljZSIsImZvckVhY2giLCJyZXF1ZXN0IiwiZGVsZXRlIiwib3BlbkRhdGFiYXNlIiwicmVxdWVzdEZyb21TZXJ2aWNlV29ya2VyIiwiaWRiIiwidXBncmFkZURiIiwib2xkVmVyc2lvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGJQcm9taXNlIiwiREJIZWxwZXIiLCJkYiIsInJlc3RhdXJhbnRzVVJMIiwiY29uY2F0IiwiREFUQUJBU0VfVVJMIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwianNvbiIsInN0YXR1cyIsInJlamVjdCIsInN0b3JlIiwiZ2V0QWxsIiwiaWRiUmVzdGF1cmFudHMiLCJmZXRjaFJlc3BvbnNlIiwiY2xvbmUiLCJmZXRjaGVkUmVzdGF1cmFudHMiLCJyZXN0YXVyYW50IiwicHV0IiwiaWQiLCJjYWxsYmFjayIsInJlc3RhdXJhbnRCeUlkVVJMIiwiZ2V0IiwiTnVtYmVyIiwicGFyc2VJbnQiLCJpZGJSZXN0YXVyYW50IiwiZmV0Y2hlZFJlc3RhdXJhbnQiLCJyZXN0YXVyYW50SWQiLCJyZXZpZXdzQnlSZXN0YXVyYW50SWRVUkwiLCJpbmRleCIsImlkYlJldmlld3MiLCJmZXRjaGVkUmV2aWV3cyIsInJldmlldyIsInJldmlld3MiLCJjdWlzaW5lIiwiZmV0Y2hSZXN0YXVyYW50cyIsInJlc3RhdXJhbnRzIiwicmVzdWx0cyIsImZpbHRlciIsInIiLCJjdWlzaW5lX3R5cGUiLCJuZWlnaGJvcmhvb2QiLCJuZWlnaGJvcmhvb2RzIiwibWFwIiwidiIsImkiLCJ1bmlxdWVOZWlnaGJvcmhvb2RzIiwiaW5kZXhPZiIsImN1aXNpbmVzIiwidW5pcXVlQ3Vpc2luZXMiLCJvcHRpb25zIiwic2l6ZSIsInNpbmdsZVZhbHVlIiwicGhvdG9ncmFwaF9zbWFsbF8yeCIsInBob3RvZ3JhcGhfc21hbGxfMXgiLCJwaG90b2dyYXBoX21lZGl1bV8yeCIsInBob3RvZ3JhcGhfbWVkaXVtXzF4Iiwid2lkZSIsInBob3RvZ3JhcGhfbGFyZ2Vfd2lkZSIsInBob3RvZ3JhcGhfbGFyZ2UiLCJtYXJrZXIiLCJMIiwibGF0bG5nIiwibGF0IiwibG5nIiwidGl0bGUiLCJuYW1lIiwiYWx0IiwidXJsIiwidXJsRm9yUmVzdGF1cmFudCIsImFkZFRvIiwibmV3TWFwIiwic2V0RmF2b3VyaXRlU3RhdHVzVXJsIiwibWV0aG9kIiwidXBkYXRlZFJlc3RhdXJhbnQiLCJyYXRpbmciLCJjb21tZW50cyIsImFkZFJldmlld1VybCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdGF1cmFudF9pZCIsIm5ld1JldmlldyIsImZvcm1hdERhdGUiLCJkYXRlIiwiZGF5IiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJzdHJpbmdUb0Jvb2xlYW4iLCJzdHJpbmciLCJ0b2FzdFRpbWVyIiwicGVuZGluZ1RvYXN0cyIsInNob3VsZFJlc3RhcnRUb2FzdFRpbWVyIiwicGF1c2VUb2FzdFRpbWVyIiwiY2xlYXJUaW1lb3V0IiwicmVzdGFydFRvYXN0VGltZXIiLCJzZXRUaW1lb3V0IiwiaGlkZVRvYXN0IiwiZW5xdWV1ZVRvYXN0IiwibWVzc2FnZSIsInR5cGUiLCJ1bnNoaWZ0Iiwic2hvd1RvYXN0IiwidG9hc3QiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9hc3RUZXh0IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2V0QXR0cmlidXRlIiwicG9wIiwidG9hc3RFbGVtZW50IiwidG9hc3RJY29uIiwiaW5uZXJIVE1MIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiYUFBQSxJQUFNQSxzQkFBd0IsV0FDdkJDLFVBQVVDLGVBRWZELFVBQVVDLGNBQWNDLFNBQVMsc0JBQzlCQyxNQUFNLFNBQUFDLEdBQUssT0FBSUMsUUFBUUMsSUFBSUYsTUFHMUJHLHNCQUF3QixXQUM1QkMsT0FBT0MsS0FBSyxnQ0FBZ0NDLEtBQzFDLFNBQUFDLEdBQUssT0FBSUEsRUFBTUMsT0FBT0YsS0FBSyxTQUFDRyxHQUFhLElBQy9CQyxFQUFXRCxFQUFYQyxPQUNKQSxHQUFVLElBR2RELEVBQVNFLE1BQU0sRUFBR0QsRUFBUyxJQUFJRSxRQUFRLFNBQUNDLEdBQ3RDTixFQUFNTyxPQUFPRCxVQVNmRSxhQUFlLFNBQUNDLEdBQ3BCLE9BQUtwQixVQUFVQyxlQUFrQm1CLEVBRTFCQyxJQUFJWixLQUFLLHFCQUFzQixFQUFHLFNBQUNhLEdBQ3hDLE9BQVFBLEVBQVVDLFlBQ2hCLEtBQUssRUFDSEQsRUFBVUUsa0JBQWtCLGNBQWUsQ0FDekNDLFFBQVMsT0FHYixLQUFLLEVBQTBCSCxFQUFVRSxrQkFBa0IsVUFBVyxDQUNwRUMsUUFBUyxPQUVFQyxZQUFZLGdCQUFpQixpQkFFMUMsS0FBSyxFQUNISixFQUFVRSxrQkFBa0IsU0FBVSxDQUNwQ0MsUUFBUyxlQUdiLEtBQUssRUFDaUJILEVBQVVLLFlBQVlDLFlBQVksVUFDMUNGLFlBQVksZ0JBQWlCLG9CQXJCbUJHLFFBQVFDLGlaQ3pCNUUsSUFBTUMsVUFBWVosZUFLWmEsOEhBY0YsT0FBT0QsVUFBVXJCLEtBQUssU0FBQ3VCLEdBQ3JCLElBQU1DLEVBQWMsR0FBQUMsT0FBTUgsRUFBU0ksYUFBZixnQkFFcEIsSUFBS0gsRUFFSCxPQUFPSSxNQUFNSCxHQUNWeEIsS0FBSyxTQUFDNEIsR0FDTCxHQUFLQSxFQUFTQyxHQUlkLE9B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LEVBQVVHLGFBQWEsWUFBYSxVQUNwQ0gsRUFBVU8sVUFBWWQsRUFJcEJhLEVBQVVFLFVBRkMsVUFBVGQsR0FDRlcsRUFBYUcsVUFBWSxtQkFDSCwrQkFDSixZQUFUZCxHQUNUVyxFQUFhRyxVQUFZLHFCQUNILGlCQUV0QkgsRUFBYUcsVUFBWSxhQUNILHNCQUd4QnBCLGFBQWFKLFlBQ2JNLFdBQVcsV0FDVFUsRUFBVUcsYUFBYSxZQUFhLFFBQ25DLEdBQ0huQixXQUFhTSxXQUFXQyxVQUFXIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWdpc3RlclNlcnZpY2VXb3JrZXIgPSAoKSA9PiB7XG4gIGlmICghbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHJldHVybjtcblxuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3NlcnZpY2Utd29ya2VyLmpzJylcbiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbn07XG5cbmNvbnN0IGNsZWFuTWFwYm94VGlsZXNDYWNoZSA9ICgpID0+IHtcbiAgY2FjaGVzLm9wZW4oJ3Jlc3RhdXJhbnQtcmV2aWV3cy1tYXAtdGlsZXMnKS50aGVuKFxuICAgIGNhY2hlID0+IGNhY2hlLmtleXMoKS50aGVuKChyZXF1ZXN0cykgPT4ge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHJlcXVlc3RzO1xuICAgICAgaWYgKGxlbmd0aCA8PSAxMikgcmV0dXJuO1xuXG4gICAgICAvLyBrZWVwIG9ubHkgdGhlIDEyIG1vc3QgcmVjZW50IHRpbGVzXG4gICAgICByZXF1ZXN0cy5zbGljZSgwLCBsZW5ndGggLSAxMikuZm9yRWFjaCgocmVxdWVzdCkgPT4ge1xuICAgICAgICBjYWNoZS5kZWxldGUocmVxdWVzdCk7XG4gICAgICB9KTtcbiAgICB9KSxcbiAgKTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIGRlZmF1bHQtY2FzZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cblxuY29uc3Qgb3BlbkRhdGFiYXNlID0gKHJlcXVlc3RGcm9tU2VydmljZVdvcmtlcikgPT4ge1xuICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyICYmICFyZXF1ZXN0RnJvbVNlcnZpY2VXb3JrZXIpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICByZXR1cm4gaWRiLm9wZW4oJ3Jlc3RhdXJhbnQtcmV2aWV3cycsIDQsICh1cGdyYWRlRGIpID0+IHtcbiAgICBzd2l0Y2ggKHVwZ3JhZGVEYi5vbGRWZXJzaW9uKSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHtcbiAgICAgICAgICBrZXlQYXRoOiAnaWQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgMTogeyBjb25zdCByZXZpZXdzU3RvcmUgPSB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Jldmlld3MnLCB7XG4gICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICB9KTtcbiAgICAgIHJldmlld3NTdG9yZS5jcmVhdGVJbmRleCgncmVzdGF1cmFudF9pZCcsICdyZXN0YXVyYW50X2lkJyk7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdvdXRib3gnLCB7XG4gICAgICAgICAga2V5UGF0aDogJ3JlcXVlc3RfaWQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICBjb25zdCBvdXRib3hTdG9yZSA9IHVwZ3JhZGVEYi50cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnb3V0Ym94Jyk7XG4gICAgICAgIG91dGJveFN0b3JlLmNyZWF0ZUluZGV4KCdyZXN0YXVyYW50X2lkJywgJ3Jlc3RhdXJhbnRfaWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbiIsImNvbnN0IGRiUHJvbWlzZSA9IG9wZW5EYXRhYmFzZSgpO1xuXG4vKipcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxuICovXG5jbGFzcyBEQkhlbHBlciB7XG4gIC8qKlxuICAgKiBEYXRhYmFzZSBVUkwuXG4gICAqIENoYW5nZSB0aGlzIHRvIHJlc3RhdXJhbnRzLmpzb24gZmlsZSBsb2NhdGlvbiBvbiB5b3VyIHNlcnZlci5cbiAgICovXG4gIHN0YXRpYyBnZXQgREFUQUJBU0VfVVJMKCkge1xuICAgIGNvbnN0IHBvcnQgPSAxMzM3OyAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIHNlcnZlciBwb3J0XG4gICAgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH1gO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFsbCByZXN0YXVyYW50cy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRzKCkge1xuICAgIHJldHVybiBkYlByb21pc2UudGhlbigoZGIpID0+IHtcbiAgICAgIGNvbnN0IHJlc3RhdXJhbnRzVVJMID0gYCR7REJIZWxwZXIuREFUQUJBU0VfVVJMfS9yZXN0YXVyYW50c2A7XG5cbiAgICAgIGlmICghZGIpIHtcbiAgICAgICAgLy8gbWFrZSByZWd1bGFyIGZldGNoIGNhbGxcbiAgICAgICAgcmV0dXJuIGZldGNoKHJlc3RhdXJhbnRzVVJMKVxuICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IChgUmVxdWVzdCBmYWlsZWQuIFJldHVybmVkIHN0YXR1cyBvZiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiByZXN0YXVyYW50cyBmcm9tIElEQlxuICAgICAgbGV0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJykub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICByZXR1cm4gc3RvcmUuZ2V0QWxsKCkudGhlbigoaWRiUmVzdGF1cmFudHMpID0+IHtcbiAgICAgICAgY29uc3QgZmV0Y2hSZXNwb25zZSA9IGZldGNoKHJlc3RhdXJhbnRzVVJMKVxuICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IChgUmVxdWVzdCBmYWlsZWQuIFJldHVybmVkIHN0YXR1cyBvZiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSlNPTiA9IHJlc3BvbnNlLmNsb25lKCkuanNvbigpO1xuICAgICAgICAgICAgLy8gdXBkYXRlIElEQiByZXN0YXVyYW50cyB3aXRoIGZldGNoIHJlc3BvbnNlIGV2ZW4gaWYgdmFsdWVzIGZyb20gSURCIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgICAgICAgIHJlc3BvbnNlSlNPTi50aGVuKChmZXRjaGVkUmVzdGF1cmFudHMpID0+IHtcbiAgICAgICAgICAgICAgc3RvcmUgPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgICAgICAgIGZldGNoZWRSZXN0YXVyYW50cy5mb3JFYWNoKChyZXN0YXVyYW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlkYlJlc3RhdXJhbnRzICYmIGlkYlJlc3RhdXJhbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gaWRiUmVzdGF1cmFudHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgSURCLnJlc3RhdXJhbnRzIGlzIGVtcHR5LCByZXR1cm4gdGhlIGZldGNoIHJlc3BvbnNlIGluc3RlYWRcbiAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhIHJlc3RhdXJhbnQgYnkgaXRzIElELlxuICAgKi9cbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGNhbGxiYWNrKSB7XG4gICAgZGJQcm9taXNlLnRoZW4oKGRiKSA9PiB7XG4gICAgICBjb25zdCByZXN0YXVyYW50QnlJZFVSTCA9IGAke0RCSGVscGVyLkRBVEFCQVNFX1VSTH0vcmVzdGF1cmFudHMvJHtpZH1gO1xuXG4gICAgICBpZiAoIWRiKSB7XG4gICAgICAgIC8vIG1ha2UgcmVndWxhciBmZXRjaCBjYWxsXG4gICAgICAgIHJldHVybiBmZXRjaChyZXN0YXVyYW50QnlJZFVSTClcbiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSAoYFJlcXVlc3QgZmFpbGVkLiBSZXR1cm5lZCBzdGF0dXMgb2YgJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gcmVzdGF1cmFudCBmcm9tIElEQlxuICAgICAgbGV0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJykub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAvLyBpZCBjb21lcyBhcyBhIHN0cmluZyBmcm9tIHRoZSB1cmwsIGNvbnZlcnQgdG8gYSBudW1iZXIgYmVmb3JlIGxvb2t1cFxuICAgICAgcmV0dXJuIHN0b3JlLmdldChOdW1iZXIucGFyc2VJbnQoaWQsIDEwKSkudGhlbigoaWRiUmVzdGF1cmFudCkgPT4ge1xuICAgICAgICBjb25zdCBmZXRjaFJlc3BvbnNlID0gZmV0Y2gocmVzdGF1cmFudEJ5SWRVUkwpXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gKGBSZXF1ZXN0IGZhaWxlZC4gUmV0dXJuZWQgc3RhdHVzIG9mICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VKU09OID0gcmVzcG9uc2UuY2xvbmUoKS5qc29uKCk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgSURCIHJlc3RhdXJhbnRzIHdpdGggZmV0Y2ggcmVzcG9uc2UgZXZlbiBpZiB2YWx1ZSBmcm9tIElEQiB3aWxsIGJlIHJldHVybmVkXG4gICAgICAgICAgICByZXNwb25zZUpTT04udGhlbigoZmV0Y2hlZFJlc3RhdXJhbnQpID0+IHtcbiAgICAgICAgICAgICAgc3RvcmUgPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgICAgICAgIHN0b3JlLnB1dChmZXRjaGVkUmVzdGF1cmFudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpZGJSZXN0YXVyYW50IHx8IGZldGNoUmVzcG9uc2U7XG4gICAgICB9KTtcbiAgICB9KS50aGVuKChyZXN0YXVyYW50KSA9PiB7IGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpOyB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4geyBjYWxsYmFjayhlcnJvciwgbnVsbCk7IH0pO1xuICB9XG5cblxuICAvKipcbiAgICogRmV0Y2ggcmV2aWV3cyBieSByZXN0YXVyYW50IElELlxuICAgKi9cbiAgc3RhdGljIGZldGNoUmV2aWV3c0J5UmVzdGF1cmFudElkKHJlc3RhdXJhbnRJZCwgY2FsbGJhY2spIHtcbiAgICBkYlByb21pc2UudGhlbigoZGIpID0+IHtcbiAgICAgIGNvbnN0IHJldmlld3NCeVJlc3RhdXJhbnRJZFVSTCA9IGAke0RCSGVscGVyLkRBVEFCQVNFX1VSTH0vcmV2aWV3cy8/cmVzdGF1cmFudF9pZD0ke3Jlc3RhdXJhbnRJZH1gO1xuXG4gICAgICBpZiAoIWRiKSB7XG4gICAgICAgIC8vIG1ha2UgcmVndWxhciBmZXRjaCBjYWxsXG4gICAgICAgIHJldHVybiBmZXRjaChyZXZpZXdzQnlSZXN0YXVyYW50SWRVUkwpXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gKGBSZXF1ZXN0IGZhaWxlZC4gUmV0dXJuZWQgc3RhdHVzIG9mICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIHJldmlld3MgZnJvbSBJREJcbiAgICAgIGxldCBzdG9yZSA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJykub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgIGNvbnN0IHJldmlld3NCeVJlc3RhdXJhbnRJZEluZGV4ID0gc3RvcmUuaW5kZXgoJ3Jlc3RhdXJhbnRfaWQnKTtcbiAgICAgIC8vIGlkIGNvbWVzIGFzIGEgc3RyaW5nIGZyb20gdGhlIHVybCwgY29udmVydCB0byBhIG51bWJlciBiZWZvcmUgbG9va3VwXG4gICAgICByZXR1cm4gcmV2aWV3c0J5UmVzdGF1cmFudElkSW5kZXguZ2V0QWxsKE51bWJlci5wYXJzZUludChyZXN0YXVyYW50SWQsIDEwKSkudGhlbigoaWRiUmV2aWV3cykgPT4ge1xuICAgICAgICBjb25zdCBmZXRjaFJlc3BvbnNlID0gZmV0Y2gocmV2aWV3c0J5UmVzdGF1cmFudElkVVJMKVxuICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IChgUmVxdWVzdCBmYWlsZWQuIFJldHVybmVkIHN0YXR1cyBvZiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSlNPTiA9IHJlc3BvbnNlLmNsb25lKCkuanNvbigpO1xuICAgICAgICAgICAgLy8gdXBkYXRlIElEQiByZXZpZXdzIHdpdGggZmV0Y2ggcmVzcG9uc2UgZXZlbiBpZiB2YWx1ZXMgZnJvbSBJREIgd2lsbCBiZSByZXR1cm5lZFxuICAgICAgICAgICAgcmVzcG9uc2VKU09OLnRoZW4oKGZldGNoZWRSZXZpZXdzKSA9PiB7XG4gICAgICAgICAgICAgIHN0b3JlID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgICAgICAgICAgZmV0Y2hlZFJldmlld3MuZm9yRWFjaCgocmV2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJldmlldyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoaWRiUmV2aWV3cyAmJiBpZGJSZXZpZXdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gaWRiUmV2aWV3cztcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBJREIucmV2aWV3cyBpcyBlbXB0eSwgcmV0dXJuIHRoZSBmZXRjaCByZXNwb25zZSBpbnN0ZWFkXG4gICAgICAgIHJldHVybiBmZXRjaFJlc3BvbnNlO1xuICAgICAgfSk7XG4gICAgfSkudGhlbigocmV2aWV3cykgPT4geyBjYWxsYmFjayhudWxsLCByZXZpZXdzKTsgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsgY2FsbGJhY2soZXJyb3IsIG51bGwpOyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgdHlwZSB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmUoY3Vpc2luZSwgY2FsbGJhY2spIHtcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHMgIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygpLnRoZW4oKHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxuICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKS50aGVuKChyZXN0YXVyYW50cykgPT4ge1xuICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBuZWlnaGJvcmhvb2RcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIGFuZCBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKS50aGVuKChyZXN0YXVyYW50cykgPT4ge1xuICAgICAgbGV0IHJlc3VsdHMgPSByZXN0YXVyYW50cztcbiAgICAgIGlmIChjdWlzaW5lICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBjdWlzaW5lXG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKG5laWdoYm9yaG9vZCAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaE5laWdoYm9yaG9vZHMoY2FsbGJhY2spIHtcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKCkudGhlbigocmVzdGF1cmFudHMpID0+IHtcbiAgICAgIC8vIEdldCBhbGwgbmVpZ2hib3Job29kcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgY29uc3QgbmVpZ2hib3Job29kcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0ubmVpZ2hib3Job29kKTtcbiAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xuICAgICAgY29uc3QgdW5pcXVlTmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHMuZmlsdGVyKCh2LCBpKSA9PiBuZWlnaGJvcmhvb2RzLmluZGV4T2YodikgPT0gaSk7XG4gICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVOZWlnaGJvcmhvb2RzKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgY3Vpc2luZXMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKS50aGVuKChyZXN0YXVyYW50cykgPT4ge1xuICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgY29uc3QgY3Vpc2luZXMgPSByZXN0YXVyYW50cy5tYXAoKHYsIGkpID0+IHJlc3RhdXJhbnRzW2ldLmN1aXNpbmVfdHlwZSk7XG4gICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXG4gICAgICBjb25zdCB1bmlxdWVDdWlzaW5lcyA9IGN1aXNpbmVzLmZpbHRlcigodiwgaSkgPT4gY3Vpc2luZXMuaW5kZXhPZih2KSA9PSBpKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxuICAgKi9cbiAgc3RhdGljIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgIHJldHVybiAoYC4vcmVzdGF1cmFudC5odG1sP2lkPSR7cmVzdGF1cmFudC5pZH1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0YXVyYW50IGltYWdlIFVSTC5cbiAgICovXG4gIHN0YXRpYyBpbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5zaXplID09PSAnc21hbGwnKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnNpbmdsZVZhbHVlID09PSB0cnVlKSByZXR1cm4gYGltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaF9zbWFsbF8yeH1gO1xuICAgICAgICByZXR1cm4gYGltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaF9zbWFsbF8xeH0gMXgsIGltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaF9zbWFsbF8yeH0gMnhgO1xuICAgICAgfSBpZiAob3B0aW9ucy5zaXplID09PSAnbWVkaXVtJykge1xuICAgICAgICBpZiAob3B0aW9ucy5zaW5nbGVWYWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIGBpbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGhfbWVkaXVtXzJ4fWA7XG4gICAgICAgIHJldHVybiBgaW1nLyR7cmVzdGF1cmFudC5waG90b2dyYXBoX21lZGl1bV8xeH0gMXgsIGltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaF9tZWRpdW1fMnh9IDJ4YDtcbiAgICAgIH0gaWYgKG9wdGlvbnMuc2l6ZSA9PT0gJ2xhcmdlJyAmJiBvcHRpb25zLndpZGUpIHtcbiAgICAgICAgcmV0dXJuIGBpbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGhfbGFyZ2Vfd2lkZX1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGBpbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGhfbGFyZ2V9YCk7XG4gIH1cblxuICAvKipcbiAgICogTWFwIG1hcmtlciBmb3IgYSByZXN0YXVyYW50LlxuICAgKi9cbiAgc3RhdGljIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9sZWFmbGV0anMuY29tL3JlZmVyZW5jZS0xLjMuMC5odG1sI21hcmtlclxuICAgIGNvbnN0IG1hcmtlciA9IG5ldyBMLm1hcmtlcihbcmVzdGF1cmFudC5sYXRsbmcubGF0LCByZXN0YXVyYW50LmxhdGxuZy5sbmddLFxuICAgICAge1xuICAgICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgICBhbHQ6IHJlc3RhdXJhbnQubmFtZSxcbiAgICAgICAgdXJsOiBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpLFxuICAgICAgfSk7XG4gICAgbWFya2VyLmFkZFRvKG5ld01hcCk7XG4gICAgcmV0dXJuIG1hcmtlcjtcbiAgfVxuXG4gIHN0YXRpYyBzZXRSZXN0YXVyYW50RmF2b3VyaXRlU3RhdHVzKHJlc3RhdXJhbnRJZCwgc3RhdHVzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNldEZhdm91cml0ZVN0YXR1c1VybCA9IGAke0RCSGVscGVyLkRBVEFCQVNFX1VSTH0vcmVzdGF1cmFudHMvJHtyZXN0YXVyYW50SWR9Lz9pc19mYXZvcml0ZT0ke3N0YXR1c31gO1xuICAgIGZldGNoKHNldEZhdm91cml0ZVN0YXR1c1VybCwgeyBtZXRob2Q6ICdQVVQnIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KS50aGVuKCh1cGRhdGVkUmVzdGF1cmFudCkgPT4ge1xuICAgICAgZGJQcm9taXNlLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWR3cml0ZScpLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xuICAgICAgICBzdG9yZS5wdXQodXBkYXRlZFJlc3RhdXJhbnQpO1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjayhudWxsLCB1cGRhdGVkUmVzdGF1cmFudCk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgYWRkUmV2aWV3KHJlc3RhdXJhbnRJZCwgbmFtZSwgcmF0aW5nLCBjb21tZW50cywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhZGRSZXZpZXdVcmwgPSBgJHtEQkhlbHBlci5EQVRBQkFTRV9VUkx9L3Jldmlld3NgO1xuICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICByZXN0YXVyYW50X2lkOiByZXN0YXVyYW50SWQsXG4gICAgICBuYW1lLFxuICAgICAgcmF0aW5nLFxuICAgICAgY29tbWVudHMsXG4gICAgfSk7XG4gICAgZmV0Y2goYWRkUmV2aWV3VXJsLCB7IG1ldGhvZDogJ1BPU1QnLCBib2R5IH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gKGBSZXF1ZXN0IGZhaWxlZC4gUmV0dXJuZWQgc3RhdHVzIG9mICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KS50aGVuKChuZXdSZXZpZXcpID0+IHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG5ld1Jldmlldyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0T3V0Ym94UmV2aWV3cyhyZXN0YXVyYW50SWQsIGNhbGxiYWNrKSB7XG4gICAgZGJQcm9taXNlLnRoZW4oKGRiKSA9PiB7XG4gICAgICBpZiAoIWRiKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gJ0Vycm9yIGNvbm5lY3RpbmcgdG8gSW5kZXhlZERCJztcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzdG9yZSA9IGRiLnRyYW5zYWN0aW9uKCdvdXRib3gnKS5vYmplY3RTdG9yZSgnb3V0Ym94Jyk7XG4gICAgICBjb25zdCByZXZpZXdzQnlSZXN0YXVyYW50SWRJbmRleCA9IHN0b3JlLmluZGV4KCdyZXN0YXVyYW50X2lkJyk7XG4gICAgICAvLyBpZCBjb21lcyBhcyBhIHN0cmluZyBmcm9tIHRoZSB1cmwsIGNvbnZlcnQgdG8gYSBudW1iZXIgYmVmb3JlIGxvb2t1cFxuICAgICAgcmV2aWV3c0J5UmVzdGF1cmFudElkSW5kZXguZ2V0QWxsKE51bWJlci5wYXJzZUludChyZXN0YXVyYW50SWQsIDEwKSkudGhlbigoaWRiUmV2aWV3cykgPT4ge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBpZGJSZXZpZXdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCIvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTUyNDYxL2hvdy10by1mb3JtYXQtYS1qYXZhc2NyaXB0LWRhdGVcbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICBjb25zdCBtb250aE5hbWVzID0gW1xuICAgICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJyxcbiAgICAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsXG4gICAgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsXG4gICAgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJyxcbiAgXTtcblxuICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgY29uc3QgbW9udGggPSBtb250aE5hbWVzW2RhdGUuZ2V0TW9udGgoKV07XG4gIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgcmV0dXJuIGAke21vbnRofSAke2RheX0sICR7eWVhcn1gO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb0Jvb2xlYW4oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnYm9vbGVhbicpIHJldHVybiBzdHJpbmc7XG5cbiAgcmV0dXJuIHN0cmluZyA9PT0gJ3RydWUnO1xufVxuIiwibGV0IHRvYXN0VGltZXIgPSBudWxsO1xuY29uc3QgcGVuZGluZ1RvYXN0cyA9IFtdO1xubGV0IHNob3VsZFJlc3RhcnRUb2FzdFRpbWVyID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHBhdXNlVG9hc3RUaW1lcigpIHtcbiAgY2xlYXJUaW1lb3V0KHRvYXN0VGltZXIpO1xuICB0b2FzdFRpbWVyID0gbnVsbDtcbiAgc2hvdWxkUmVzdGFydFRvYXN0VGltZXIgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXN0YXJ0VG9hc3RUaW1lcigpIHtcbiAgaWYgKHNob3VsZFJlc3RhcnRUb2FzdFRpbWVyKSB7XG4gICAgc2hvdWxkUmVzdGFydFRvYXN0VGltZXIgPSBmYWxzZTtcbiAgICB0b2FzdFRpbWVyID0gc2V0VGltZW91dChoaWRlVG9hc3QsIDIwMDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVucXVldWVUb2FzdChtZXNzYWdlLCB0eXBlKSB7XG4gIC8vIGFkZCB0aGUgdG9hc3QgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgKHF1ZXVlKVxuICBwZW5kaW5nVG9hc3RzLnVuc2hpZnQoeyBtZXNzYWdlLCB0eXBlIH0pO1xuICBpZiAodG9hc3RUaW1lciA9PT0gbnVsbCkgeyAvLyBubyB0b2FzdCBpcyBjdXJyZW50bHkgc2hvd2luZ1xuICAgIHNob3dUb2FzdCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVUb2FzdCgpIHtcbiAgY2xlYXJUaW1lb3V0KHRvYXN0VGltZXIpO1xuICB0b2FzdFRpbWVyID0gbnVsbDtcbiAgc2hvdWxkUmVzdGFydFRvYXN0VGltZXIgPSBmYWxzZTtcbiAgY29uc3QgdG9hc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9hc3QnKTtcbiAgY29uc3QgdG9hc3RUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0LXRleHQnKTtcbiAgdG9hc3QuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0b2FzdFRleHQuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgLy8gc2hvdyB0aGUgbmV4dCB0b2FzdCBpZiB0aGVyZSBpcyBhbnkgcGVuZGluZ1xuICAgIHNob3dUb2FzdCgpO1xuICB9LCAwKTtcbn1cblxuZnVuY3Rpb24gc2hvd1RvYXN0KCkge1xuICBjb25zdCB0b2FzdCA9IHBlbmRpbmdUb2FzdHMucG9wKCk7XG4gIGlmICghdG9hc3QgfHwgIXRvYXN0Lm1lc3NhZ2UpIHJldHVybjtcblxuICBjb25zdCB7IG1lc3NhZ2UsIHR5cGUgfSA9IHRvYXN0O1xuICBjb25zdCB0b2FzdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9hc3QnKTtcbiAgY29uc3QgdG9hc3RUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0LXRleHQnKTtcbiAgY29uc3QgdG9hc3RJY29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0LWljb24nKTtcblxuICB0b2FzdFRleHQuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gIHRvYXN0VGV4dC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgdG9hc3RFbGVtZW50LmNsYXNzTmFtZSA9ICd0b2FzdCBzaG93IGVycm9yJztcbiAgICB0b2FzdEljb24uY2xhc3NOYW1lID0gJ2ZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSc7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgdG9hc3RFbGVtZW50LmNsYXNzTmFtZSA9ICd0b2FzdCBzaG93IHN1Y2Nlc3MnO1xuICAgIHRvYXN0SWNvbi5jbGFzc05hbWUgPSAnZmFzIGZhLWNoZWNrJztcbiAgfSBlbHNlIHtcbiAgICB0b2FzdEVsZW1lbnQuY2xhc3NOYW1lID0gJ3RvYXN0IHNob3cnO1xuICAgIHRvYXN0SWNvbi5jbGFzc05hbWUgPSAnZmFzIGZhLWluZm8tY2lyY2xlJztcbiAgfVxuXG4gIGNsZWFyVGltZW91dCh0b2FzdFRpbWVyKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgdG9hc3RUZXh0LnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ29mZicpO1xuICB9LCAwKTtcbiAgdG9hc3RUaW1lciA9IHNldFRpbWVvdXQoaGlkZVRvYXN0LCAxMDAwMCk7XG59XG4iXX0=
