"use strict";

/** **** modal ****** */
var previouslyFocusedElement;

function openModal() {
  previouslyFocusedElement = document.activeElement;
  var overlay = document.querySelector('.overlay');
  var interactiveElements = overlay.querySelectorAll('button, input, textarea');
  overlay.classList.add('show');
  document.body.classList.add('has-open-modal');
  document.addEventListener('keydown', trapTabKey); // focus the first element in the overlay. timeout is needed because of CSS transition

  setTimeout(function () {
    interactiveElements[0].focus();
  }, 100);
}

function closeModal() {
  clearFormErrors();
  document.querySelector('.overlay').classList.remove('show');
  document.body.classList.remove('has-open-modal');
  document.removeEventListener('keydown', trapTabKey);

  if (previouslyFocusedElement) {
    previouslyFocusedElement.focus();
  }
}

function trapTabKey(event) {
  var overlay = document.querySelector('.overlay');
  var interactiveElements = overlay.querySelectorAll('button, input');
  var firstElement = interactiveElements[0];
  var lastElement = interactiveElements[interactiveElements.length - 1];

  if (event.key && event.key === 'Tab') {
    if (event.shiftKey && event.target === firstElement) {
      // shift + tab
      event.preventDefault();
      lastElement.focus();
    } else if (!event.shiftKey && event.target === lastElement) {
      // tab
      event.preventDefault();
      firstElement.focus();
    }
  }
}
/** **** handle errors ****** */


function setNameInputError() {
  var nameInput = document.getElementById('name');
  var nameInputError = document.getElementById('name-error');
  nameInput.classList.add('has-error');
  nameInput.setAttribute('aria-invalid', 'true');
  nameInput.setAttribute('aria-describedby', 'name-error');
  nameInputError.classList.add('show');
}

function clearNameInputError() {
  var nameInput = document.getElementById('name');
  var nameInputError = document.getElementById('name-error');
  nameInput.classList.remove('has-error');
  nameInput.removeAttribute('aria-invalid');
  nameInput.removeAttribute('aria-describedby');
  nameInputError.classList.remove('show');
}

function setRatingInputError() {
  var ratingInput = document.getElementById('rating');
  var ratingInputError = document.getElementById('rating-error');
  ratingInput.classList.add('has-error');
  ratingInput.setAttribute('aria-invalid', 'true');
  ratingInput.setAttribute('aria-describedby', 'rating-error');
  ratingInputError.classList.add('show');
}

function clearRatingInputError() {
  var ratingInput = document.getElementById('rating');
  var ratingInputError = document.getElementById('rating-error');
  ratingInput.classList.remove('has-error');
  ratingInput.removeAttribute('aria-invalid');
  ratingInput.removeAttribute('aria-describedby');
  ratingInputError.classList.remove('show');
}

function setCommentInputError() {
  var commentInput = document.getElementById('comments');
  var commentInputError = document.getElementById('comments-error');
  commentInput.classList.add('has-error');
  commentInput.setAttribute('aria-invalid', 'true');
  commentInput.setAttribute('aria-describedby', 'comments-error');
  commentInputError.classList.add('show');
}

function clearCommentInputError() {
  var commentInput = document.getElementById('comments');
  var commentInputError = document.getElementById('comments-error');
  commentInput.classList.remove('has-error');
  commentInput.removeAttribute('aria-invalid');
  commentInput.removeAttribute('aria-describedby');
  commentInputError.classList.remove('show');
}

var errorFunctions = {
  name: {
    setError: setNameInputError,
    clearError: clearNameInputError
  },
  rating: {
    setError: setRatingInputError,
    clearError: clearRatingInputError
  },
  comments: {
    setError: setCommentInputError,
    clearError: clearCommentInputError
  }
};
/** **** validation ****** */

function validateInput(id, value) {
  var input = document.getElementById(id).cloneNode();
  var inputValue;

  if (value !== undefined) {
    inputValue = value;
  } else {
    inputValue = input.value;
  }

  inputValue = id === 'rating' ? Number.parseInt(inputValue, 10) : inputValue;

  if (inputValue) {
    errorFunctions[id].clearError();
    return true;
  }

  requestAnimationFrame(errorFunctions[id].setError);
  return false;
}

function validateAllInputs() {
  var error = false;
  var inputIds = ['name', 'rating', 'comments'];
  var invalidInputs = [];
  inputIds.forEach(function (id) {
    var inputValid = validateInput(id);

    if (!inputValid) {
      invalidInputs.push(id);
      error = true;
    }
  });
  return {
    error: error,
    invalidInputs: invalidInputs
  };
}
/** **** handle events ****** */


function handleRangeChange(event) {
  var ratingValue = document.querySelector('.rating-value');
  ratingValue.innerHTML = "".concat(event.target.value, ".0");
  validateInput(event.target.name, event.target.value);
}

function handleInputKeyUp(event) {
  if (!(event.key && event.key === 'Tab')) {
    validateInput(event.target.name, event.target.value);
  }
}

function handleInputBlur(event) {
  validateInput(event.target.name, event.target.value);
}

function getFormInputValues() {
  var inputIds = ['name', 'rating', 'comments'];
  var values = {};
  inputIds.forEach(function (id) {
    values[id] = document.getElementById(id).value;
  });
  return values;
}

function clearForm() {
  document.getElementById('name').value = '';
  document.getElementById('rating').value = '0';
  document.querySelector('.rating-value').innerHTML = '0.0';
  document.getElementById('comments').value = '';
}

function clearFormErrors() {
  document.getElementById('name-error').classList.remove('show');
  document.getElementById('rating-error').classList.remove('show');
  document.getElementById('comments-error').classList.remove('show');
  document.getElementById('add-review-form-error').classList.remove('show');
  document.getElementById('add-review-form-error').innerHTML = '';
  document.getElementById('name').classList.remove('has-error');
  document.getElementById('rating').classList.remove('has-error');
  document.getElementById('comments').classList.remove('has-error');
}

function handleAddReviewSubmit() {
  var _validateAllInputs = validateAllInputs(),
      error = _validateAllInputs.error,
      invalidInputs = _validateAllInputs.invalidInputs;

  if (!error) {
    var _getFormInputValues = getFormInputValues(),
        name = _getFormInputValues.name,
        rating = _getFormInputValues.rating,
        comments = _getFormInputValues.comments;

    if (!navigator.serviceWorker || !navigator.serviceWorker.controller) {
      // perform regular fetch and regular updates
      var submitButton = document.getElementById('add-review-submit');
      submitButton.setAttribute('disabled', true);
      submitButton.setAttribute('aria-busy', 'true');
      DBHelper.addReview(self.restaurant.id, name, rating, comments, function (error, newReview) {
        submitButton.removeAttribute('disabled');
        submitButton.setAttribute('aria-busy', 'false');

        if (error) {
          enqueueToast('An error occurred. Please try again', 'error');
          console.log(error);
        } else {
          enqueueToast("".concat(name, "'s review has been saved"), 'success');
          var ul = document.getElementById('reviews-list');
          ul.insertBefore(createReviewHTML(newReview), ul.firstChild);
          closeModal();
          clearForm();
        }
      });
    } else {
      var requestId = "".concat(self.restaurant.id, "-").concat(Date.now());
      var newReview = {
        name: name,
        rating: rating,
        comments: comments,
        restaurant_id: self.restaurant.id
      };
      var ul = document.getElementById('reviews-list');
      ul.insertBefore(createReviewHTML(newReview, true, requestId), ul.firstChild);

      if ('onLine' in navigator && !navigator.onLine) {
        enqueueToast('Your review will be submitted when you are back online');
      }

      closeModal();
      clearForm();
      navigator.serviceWorker.controller.postMessage({
        type: 'post-review',
        review: newReview,
        requestId: requestId
      });
    }
  } else {
    // form errors not cleared
    var formError = document.getElementById('add-review-form-error');
    var errorText = "Invalid input for: ".concat(invalidInputs.join(', '));
    formError.innerHTML = errorText;
    formError.classList.add('show');
    document.getElementById(invalidInputs[0]).focus();
  }
}

function logEvent(event) {
  console.log(event.target.value);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFJldmlld01vZGFsLmpzIl0sIm5hbWVzIjpbInByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCIsIm9wZW5Nb2RhbCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIm92ZXJsYXkiLCJxdWVyeVNlbGVjdG9yIiwiaW50ZXJhY3RpdmVFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJhZGQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInRyYXBUYWJLZXkiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJjbG9zZU1vZGFsIiwiY2xlYXJGb3JtRXJyb3JzIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZmlyc3RFbGVtZW50IiwibGFzdEVsZW1lbnQiLCJsZW5ndGgiLCJrZXkiLCJzaGlmdEtleSIsInRhcmdldCIsInByZXZlbnREZWZhdWx0Iiwic2V0TmFtZUlucHV0RXJyb3IiLCJuYW1lSW5wdXQiLCJnZXRFbGVtZW50QnlJZCIsIm5hbWVJbnB1dEVycm9yIiwic2V0QXR0cmlidXRlIiwiY2xlYXJOYW1lSW5wdXRFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsInNldFJhdGluZ0lucHV0RXJyb3IiLCJyYXRpbmdJbnB1dCIsInJhdGluZ0lucHV0RXJyb3IiLCJjbGVhclJhdGluZ0lucHV0RXJyb3IiLCJzZXRDb21tZW50SW5wdXRFcnJvciIsImNvbW1lbnRJbnB1dCIsImNvbW1lbnRJbnB1dEVycm9yIiwiY2xlYXJDb21tZW50SW5wdXRFcnJvciIsImVycm9yRnVuY3Rpb25zIiwibmFtZSIsInNldEVycm9yIiwiY2xlYXJFcnJvciIsInJhdGluZyIsImNvbW1lbnRzIiwidmFsaWRhdGVJbnB1dCIsImlkIiwidmFsdWUiLCJpbnB1dCIsImNsb25lTm9kZSIsImlucHV0VmFsdWUiLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJwYXJzZUludCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZhbGlkYXRlQWxsSW5wdXRzIiwiZXJyb3IiLCJpbnB1dElkcyIsImludmFsaWRJbnB1dHMiLCJmb3JFYWNoIiwiaW5wdXRWYWxpZCIsInB1c2giLCJoYW5kbGVSYW5nZUNoYW5nZSIsInJhdGluZ1ZhbHVlIiwiaW5uZXJIVE1MIiwiaGFuZGxlSW5wdXRLZXlVcCIsImhhbmRsZUlucHV0Qmx1ciIsImdldEZvcm1JbnB1dFZhbHVlcyIsInZhbHVlcyIsImNsZWFyRm9ybSIsImhhbmRsZUFkZFJldmlld1N1Ym1pdCIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJjb250cm9sbGVyIiwic3VibWl0QnV0dG9uIiwiREJIZWxwZXIiLCJhZGRSZXZpZXciLCJzZWxmIiwicmVzdGF1cmFudCIsIm5ld1JldmlldyIsImVucXVldWVUb2FzdCIsImNvbnNvbGUiLCJsb2ciLCJ1bCIsImluc2VydEJlZm9yZSIsImNyZWF0ZVJldmlld0hUTUwiLCJmaXJzdENoaWxkIiwicmVxdWVzdElkIiwiRGF0ZSIsIm5vdyIsInJlc3RhdXJhbnRfaWQiLCJvbkxpbmUiLCJwb3N0TWVzc2FnZSIsInR5cGUiLCJyZXZpZXciLCJmb3JtRXJyb3IiLCJlcnJvclRleHQiLCJqb2luIiwibG9nRXZlbnQiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQSxJQUFJQSx3QkFBSjs7QUFFQSxTQUFTQyxTQUFULEdBQXFCO0FBQ25CRCxFQUFBQSx3QkFBd0IsR0FBR0UsUUFBUSxDQUFDQyxhQUFwQztBQUNBLE1BQU1DLE9BQU8sR0FBR0YsUUFBUSxDQUFDRyxhQUFULENBQXVCLFVBQXZCLENBQWhCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQ0csZ0JBQVIsQ0FBeUIseUJBQXpCLENBQTVCO0FBQ0FILEVBQUFBLE9BQU8sQ0FBQ0ksU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsTUFBdEI7QUFDQVAsRUFBQUEsUUFBUSxDQUFDUSxJQUFULENBQWNGLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLGdCQUE1QjtBQUNBUCxFQUFBQSxRQUFRLENBQUNTLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDQyxVQUFyQyxFQU5tQixDQU9uQjs7QUFDQUMsRUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZlAsSUFBQUEsbUJBQW1CLENBQUMsQ0FBRCxDQUFuQixDQUF1QlEsS0FBdkI7QUFDRCxHQUZTLEVBRVAsR0FGTyxDQUFWO0FBR0Q7O0FBRUQsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQkMsRUFBQUEsZUFBZTtBQUNmZCxFQUFBQSxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsVUFBdkIsRUFBbUNHLFNBQW5DLENBQTZDUyxNQUE3QyxDQUFvRCxNQUFwRDtBQUNBZixFQUFBQSxRQUFRLENBQUNRLElBQVQsQ0FBY0YsU0FBZCxDQUF3QlMsTUFBeEIsQ0FBK0IsZ0JBQS9CO0FBQ0FmLEVBQUFBLFFBQVEsQ0FBQ2dCLG1CQUFULENBQTZCLFNBQTdCLEVBQXdDTixVQUF4Qzs7QUFDQSxNQUFJWix3QkFBSixFQUE4QjtBQUM1QkEsSUFBQUEsd0JBQXdCLENBQUNjLEtBQXpCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTRixVQUFULENBQW9CTyxLQUFwQixFQUEyQjtBQUN6QixNQUFNZixPQUFPLEdBQUdGLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixVQUF2QixDQUFoQjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHRixPQUFPLENBQUNHLGdCQUFSLENBQXlCLGVBQXpCLENBQTVCO0FBQ0EsTUFBTWEsWUFBWSxHQUFHZCxtQkFBbUIsQ0FBQyxDQUFELENBQXhDO0FBQ0EsTUFBTWUsV0FBVyxHQUFHZixtQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUNnQixNQUFwQixHQUE2QixDQUE5QixDQUF2Qzs7QUFDQSxNQUFJSCxLQUFLLENBQUNJLEdBQU4sSUFBYUosS0FBSyxDQUFDSSxHQUFOLEtBQWMsS0FBL0IsRUFBc0M7QUFDcEMsUUFBSUosS0FBSyxDQUFDSyxRQUFOLElBQWtCTCxLQUFLLENBQUNNLE1BQU4sS0FBaUJMLFlBQXZDLEVBQXFEO0FBQUU7QUFDckRELE1BQUFBLEtBQUssQ0FBQ08sY0FBTjtBQUNBTCxNQUFBQSxXQUFXLENBQUNQLEtBQVo7QUFDRCxLQUhELE1BR08sSUFBSSxDQUFDSyxLQUFLLENBQUNLLFFBQVAsSUFBbUJMLEtBQUssQ0FBQ00sTUFBTixLQUFpQkosV0FBeEMsRUFBcUQ7QUFBRTtBQUM1REYsTUFBQUEsS0FBSyxDQUFDTyxjQUFOO0FBQ0FOLE1BQUFBLFlBQVksQ0FBQ04sS0FBYjtBQUNEO0FBQ0Y7QUFDRjtBQUVEOzs7QUFFQSxTQUFTYSxpQkFBVCxHQUE2QjtBQUMzQixNQUFNQyxTQUFTLEdBQUcxQixRQUFRLENBQUMyQixjQUFULENBQXdCLE1BQXhCLENBQWxCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHNUIsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixZQUF4QixDQUF2QjtBQUNBRCxFQUFBQSxTQUFTLENBQUNwQixTQUFWLENBQW9CQyxHQUFwQixDQUF3QixXQUF4QjtBQUNBbUIsRUFBQUEsU0FBUyxDQUFDRyxZQUFWLENBQXVCLGNBQXZCLEVBQXVDLE1BQXZDO0FBQ0FILEVBQUFBLFNBQVMsQ0FBQ0csWUFBVixDQUF1QixrQkFBdkIsRUFBMkMsWUFBM0M7QUFDQUQsRUFBQUEsY0FBYyxDQUFDdEIsU0FBZixDQUF5QkMsR0FBekIsQ0FBNkIsTUFBN0I7QUFDRDs7QUFFRCxTQUFTdUIsbUJBQVQsR0FBK0I7QUFDN0IsTUFBTUosU0FBUyxHQUFHMUIsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixNQUF4QixDQUFsQjtBQUNBLE1BQU1DLGNBQWMsR0FBRzVCLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBdkI7QUFDQUQsRUFBQUEsU0FBUyxDQUFDcEIsU0FBVixDQUFvQlMsTUFBcEIsQ0FBMkIsV0FBM0I7QUFDQVcsRUFBQUEsU0FBUyxDQUFDSyxlQUFWLENBQTBCLGNBQTFCO0FBQ0FMLEVBQUFBLFNBQVMsQ0FBQ0ssZUFBVixDQUEwQixrQkFBMUI7QUFDQUgsRUFBQUEsY0FBYyxDQUFDdEIsU0FBZixDQUF5QlMsTUFBekIsQ0FBZ0MsTUFBaEM7QUFDRDs7QUFFRCxTQUFTaUIsbUJBQVQsR0FBK0I7QUFDN0IsTUFBTUMsV0FBVyxHQUFHakMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixRQUF4QixDQUFwQjtBQUNBLE1BQU1PLGdCQUFnQixHQUFHbEMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixjQUF4QixDQUF6QjtBQUNBTSxFQUFBQSxXQUFXLENBQUMzQixTQUFaLENBQXNCQyxHQUF0QixDQUEwQixXQUExQjtBQUNBMEIsRUFBQUEsV0FBVyxDQUFDSixZQUFaLENBQXlCLGNBQXpCLEVBQXlDLE1BQXpDO0FBQ0FJLEVBQUFBLFdBQVcsQ0FBQ0osWUFBWixDQUF5QixrQkFBekIsRUFBNkMsY0FBN0M7QUFDQUssRUFBQUEsZ0JBQWdCLENBQUM1QixTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDRDs7QUFFRCxTQUFTNEIscUJBQVQsR0FBaUM7QUFDL0IsTUFBTUYsV0FBVyxHQUFHakMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixRQUF4QixDQUFwQjtBQUNBLE1BQU1PLGdCQUFnQixHQUFHbEMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixjQUF4QixDQUF6QjtBQUNBTSxFQUFBQSxXQUFXLENBQUMzQixTQUFaLENBQXNCUyxNQUF0QixDQUE2QixXQUE3QjtBQUNBa0IsRUFBQUEsV0FBVyxDQUFDRixlQUFaLENBQTRCLGNBQTVCO0FBQ0FFLEVBQUFBLFdBQVcsQ0FBQ0YsZUFBWixDQUE0QixrQkFBNUI7QUFDQUcsRUFBQUEsZ0JBQWdCLENBQUM1QixTQUFqQixDQUEyQlMsTUFBM0IsQ0FBa0MsTUFBbEM7QUFDRDs7QUFFRCxTQUFTcUIsb0JBQVQsR0FBZ0M7QUFDOUIsTUFBTUMsWUFBWSxHQUFHckMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixVQUF4QixDQUFyQjtBQUNBLE1BQU1XLGlCQUFpQixHQUFHdEMsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixnQkFBeEIsQ0FBMUI7QUFDQVUsRUFBQUEsWUFBWSxDQUFDL0IsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsV0FBM0I7QUFDQThCLEVBQUFBLFlBQVksQ0FBQ1IsWUFBYixDQUEwQixjQUExQixFQUEwQyxNQUExQztBQUNBUSxFQUFBQSxZQUFZLENBQUNSLFlBQWIsQ0FBMEIsa0JBQTFCLEVBQThDLGdCQUE5QztBQUNBUyxFQUFBQSxpQkFBaUIsQ0FBQ2hDLFNBQWxCLENBQTRCQyxHQUE1QixDQUFnQyxNQUFoQztBQUNEOztBQUVELFNBQVNnQyxzQkFBVCxHQUFrQztBQUNoQyxNQUFNRixZQUFZLEdBQUdyQyxRQUFRLENBQUMyQixjQUFULENBQXdCLFVBQXhCLENBQXJCO0FBQ0EsTUFBTVcsaUJBQWlCLEdBQUd0QyxRQUFRLENBQUMyQixjQUFULENBQXdCLGdCQUF4QixDQUExQjtBQUNBVSxFQUFBQSxZQUFZLENBQUMvQixTQUFiLENBQXVCUyxNQUF2QixDQUE4QixXQUE5QjtBQUNBc0IsRUFBQUEsWUFBWSxDQUFDTixlQUFiLENBQTZCLGNBQTdCO0FBQ0FNLEVBQUFBLFlBQVksQ0FBQ04sZUFBYixDQUE2QixrQkFBN0I7QUFDQU8sRUFBQUEsaUJBQWlCLENBQUNoQyxTQUFsQixDQUE0QlMsTUFBNUIsQ0FBbUMsTUFBbkM7QUFDRDs7QUFFRCxJQUFNeUIsY0FBYyxHQUFHO0FBQ3JCQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsUUFBUSxFQUFFakIsaUJBRE47QUFFSmtCLElBQUFBLFVBQVUsRUFBRWI7QUFGUixHQURlO0FBS3JCYyxFQUFBQSxNQUFNLEVBQUU7QUFDTkYsSUFBQUEsUUFBUSxFQUFFVixtQkFESjtBQUVOVyxJQUFBQSxVQUFVLEVBQUVSO0FBRk4sR0FMYTtBQVNyQlUsRUFBQUEsUUFBUSxFQUFFO0FBQ1JILElBQUFBLFFBQVEsRUFBRU4sb0JBREY7QUFFUk8sSUFBQUEsVUFBVSxFQUFFSjtBQUZKO0FBVFcsQ0FBdkI7QUFlQTs7QUFFQSxTQUFTTyxhQUFULENBQXVCQyxFQUF2QixFQUEyQkMsS0FBM0IsRUFBa0M7QUFDaEMsTUFBTUMsS0FBSyxHQUFHakQsUUFBUSxDQUFDMkIsY0FBVCxDQUF3Qm9CLEVBQXhCLEVBQTRCRyxTQUE1QixFQUFkO0FBQ0EsTUFBSUMsVUFBSjs7QUFDQSxNQUFJSCxLQUFLLEtBQUtJLFNBQWQsRUFBeUI7QUFDdkJELElBQUFBLFVBQVUsR0FBR0gsS0FBYjtBQUNELEdBRkQsTUFFTztBQUNMRyxJQUFBQSxVQUFVLEdBQUdGLEtBQUssQ0FBQ0QsS0FBbkI7QUFDRDs7QUFDREcsRUFBQUEsVUFBVSxHQUFHSixFQUFFLEtBQUssUUFBUCxHQUFrQk0sTUFBTSxDQUFDQyxRQUFQLENBQWdCSCxVQUFoQixFQUE0QixFQUE1QixDQUFsQixHQUFvREEsVUFBakU7O0FBQ0EsTUFBSUEsVUFBSixFQUFnQjtBQUNkWCxJQUFBQSxjQUFjLENBQUNPLEVBQUQsQ0FBZCxDQUFtQkosVUFBbkI7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFDRFksRUFBQUEscUJBQXFCLENBQUNmLGNBQWMsQ0FBQ08sRUFBRCxDQUFkLENBQW1CTCxRQUFwQixDQUFyQjtBQUNBLFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVNjLGlCQUFULEdBQTZCO0FBQzNCLE1BQUlDLEtBQUssR0FBRyxLQUFaO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsVUFBbkIsQ0FBakI7QUFDQSxNQUFNQyxhQUFhLEdBQUcsRUFBdEI7QUFDQUQsRUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCLFVBQUNiLEVBQUQsRUFBUTtBQUN2QixRQUFNYyxVQUFVLEdBQUdmLGFBQWEsQ0FBQ0MsRUFBRCxDQUFoQzs7QUFDQSxRQUFJLENBQUNjLFVBQUwsRUFBaUI7QUFDZkYsTUFBQUEsYUFBYSxDQUFDRyxJQUFkLENBQW1CZixFQUFuQjtBQUNBVSxNQUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNEO0FBQ0YsR0FORDtBQU9BLFNBQU87QUFBRUEsSUFBQUEsS0FBSyxFQUFMQSxLQUFGO0FBQVNFLElBQUFBLGFBQWEsRUFBYkE7QUFBVCxHQUFQO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBU0ksaUJBQVQsQ0FBMkI5QyxLQUEzQixFQUFrQztBQUNoQyxNQUFNK0MsV0FBVyxHQUFHaEUsUUFBUSxDQUFDRyxhQUFULENBQXVCLGVBQXZCLENBQXBCO0FBQ0E2RCxFQUFBQSxXQUFXLENBQUNDLFNBQVosYUFBMkJoRCxLQUFLLENBQUNNLE1BQU4sQ0FBYXlCLEtBQXhDO0FBQ0FGLEVBQUFBLGFBQWEsQ0FBQzdCLEtBQUssQ0FBQ00sTUFBTixDQUFha0IsSUFBZCxFQUFvQnhCLEtBQUssQ0FBQ00sTUFBTixDQUFheUIsS0FBakMsQ0FBYjtBQUNEOztBQUVELFNBQVNrQixnQkFBVCxDQUEwQmpELEtBQTFCLEVBQWlDO0FBQy9CLE1BQUksRUFBRUEsS0FBSyxDQUFDSSxHQUFOLElBQWFKLEtBQUssQ0FBQ0ksR0FBTixLQUFjLEtBQTdCLENBQUosRUFBeUM7QUFDdkN5QixJQUFBQSxhQUFhLENBQUM3QixLQUFLLENBQUNNLE1BQU4sQ0FBYWtCLElBQWQsRUFBb0J4QixLQUFLLENBQUNNLE1BQU4sQ0FBYXlCLEtBQWpDLENBQWI7QUFDRDtBQUNGOztBQUVELFNBQVNtQixlQUFULENBQXlCbEQsS0FBekIsRUFBZ0M7QUFDOUI2QixFQUFBQSxhQUFhLENBQUM3QixLQUFLLENBQUNNLE1BQU4sQ0FBYWtCLElBQWQsRUFBb0J4QixLQUFLLENBQUNNLE1BQU4sQ0FBYXlCLEtBQWpDLENBQWI7QUFDRDs7QUFFRCxTQUFTb0Isa0JBQVQsR0FBOEI7QUFDNUIsTUFBTVYsUUFBUSxHQUFHLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsVUFBbkIsQ0FBakI7QUFDQSxNQUFNVyxNQUFNLEdBQUcsRUFBZjtBQUNBWCxFQUFBQSxRQUFRLENBQUNFLE9BQVQsQ0FBaUIsVUFBQ2IsRUFBRCxFQUFRO0FBQ3ZCc0IsSUFBQUEsTUFBTSxDQUFDdEIsRUFBRCxDQUFOLEdBQWEvQyxRQUFRLENBQUMyQixjQUFULENBQXdCb0IsRUFBeEIsRUFBNEJDLEtBQXpDO0FBQ0QsR0FGRDtBQUdBLFNBQU9xQixNQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsU0FBVCxHQUFxQjtBQUNuQnRFLEVBQUFBLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0NxQixLQUFoQyxHQUF3QyxFQUF4QztBQUNBaEQsRUFBQUEsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixRQUF4QixFQUFrQ3FCLEtBQWxDLEdBQTBDLEdBQTFDO0FBQ0FoRCxFQUFBQSxRQUFRLENBQUNHLGFBQVQsQ0FBdUIsZUFBdkIsRUFBd0M4RCxTQUF4QyxHQUFvRCxLQUFwRDtBQUNBakUsRUFBQUEsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixVQUF4QixFQUFvQ3FCLEtBQXBDLEdBQTRDLEVBQTVDO0FBQ0Q7O0FBRUQsU0FBU2xDLGVBQVQsR0FBMkI7QUFDekJkLEVBQUFBLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsWUFBeEIsRUFBc0NyQixTQUF0QyxDQUFnRFMsTUFBaEQsQ0FBdUQsTUFBdkQ7QUFDQWYsRUFBQUEsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixjQUF4QixFQUF3Q3JCLFNBQXhDLENBQWtEUyxNQUFsRCxDQUF5RCxNQUF6RDtBQUNBZixFQUFBQSxRQUFRLENBQUMyQixjQUFULENBQXdCLGdCQUF4QixFQUEwQ3JCLFNBQTFDLENBQW9EUyxNQUFwRCxDQUEyRCxNQUEzRDtBQUNBZixFQUFBQSxRQUFRLENBQUMyQixjQUFULENBQXdCLHVCQUF4QixFQUFpRHJCLFNBQWpELENBQTJEUyxNQUEzRCxDQUFrRSxNQUFsRTtBQUNBZixFQUFBQSxRQUFRLENBQUMyQixjQUFULENBQXdCLHVCQUF4QixFQUFpRHNDLFNBQWpELEdBQTZELEVBQTdEO0FBQ0FqRSxFQUFBQSxRQUFRLENBQUMyQixjQUFULENBQXdCLE1BQXhCLEVBQWdDckIsU0FBaEMsQ0FBMENTLE1BQTFDLENBQWlELFdBQWpEO0FBQ0FmLEVBQUFBLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NyQixTQUFsQyxDQUE0Q1MsTUFBNUMsQ0FBbUQsV0FBbkQ7QUFDQWYsRUFBQUEsUUFBUSxDQUFDMkIsY0FBVCxDQUF3QixVQUF4QixFQUFvQ3JCLFNBQXBDLENBQThDUyxNQUE5QyxDQUFxRCxXQUFyRDtBQUNEOztBQUVELFNBQVN3RCxxQkFBVCxHQUFpQztBQUFBLDJCQUNFZixpQkFBaUIsRUFEbkI7QUFBQSxNQUN2QkMsS0FEdUIsc0JBQ3ZCQSxLQUR1QjtBQUFBLE1BQ2hCRSxhQURnQixzQkFDaEJBLGFBRGdCOztBQUUvQixNQUFJLENBQUNGLEtBQUwsRUFBWTtBQUFBLDhCQUN5Qlcsa0JBQWtCLEVBRDNDO0FBQUEsUUFDRjNCLElBREUsdUJBQ0ZBLElBREU7QUFBQSxRQUNJRyxNQURKLHVCQUNJQSxNQURKO0FBQUEsUUFDWUMsUUFEWix1QkFDWUEsUUFEWjs7QUFFVixRQUFLLENBQUMyQixTQUFTLENBQUNDLGFBQVosSUFBK0IsQ0FBQ0QsU0FBUyxDQUFDQyxhQUFWLENBQXdCQyxVQUE1RCxFQUF5RTtBQUN2RTtBQUNBLFVBQU1DLFlBQVksR0FBRzNFLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsbUJBQXhCLENBQXJCO0FBQ0FnRCxNQUFBQSxZQUFZLENBQUM5QyxZQUFiLENBQTBCLFVBQTFCLEVBQXNDLElBQXRDO0FBQ0E4QyxNQUFBQSxZQUFZLENBQUM5QyxZQUFiLENBQTBCLFdBQTFCLEVBQXVDLE1BQXZDO0FBQ0ErQyxNQUFBQSxRQUFRLENBQUNDLFNBQVQsQ0FBbUJDLElBQUksQ0FBQ0MsVUFBTCxDQUFnQmhDLEVBQW5DLEVBQXVDTixJQUF2QyxFQUE2Q0csTUFBN0MsRUFBcURDLFFBQXJELEVBQStELFVBQUNZLEtBQUQsRUFBUXVCLFNBQVIsRUFBc0I7QUFDbkZMLFFBQUFBLFlBQVksQ0FBQzVDLGVBQWIsQ0FBNkIsVUFBN0I7QUFDQTRDLFFBQUFBLFlBQVksQ0FBQzlDLFlBQWIsQ0FBMEIsV0FBMUIsRUFBdUMsT0FBdkM7O0FBQ0EsWUFBSTRCLEtBQUosRUFBVztBQUNUd0IsVUFBQUEsWUFBWSxDQUFDLHFDQUFELEVBQXdDLE9BQXhDLENBQVo7QUFDQUMsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkxQixLQUFaO0FBQ0QsU0FIRCxNQUdPO0FBQ0x3QixVQUFBQSxZQUFZLFdBQUl4QyxJQUFKLCtCQUFvQyxTQUFwQyxDQUFaO0FBQ0EsY0FBTTJDLEVBQUUsR0FBR3BGLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0IsY0FBeEIsQ0FBWDtBQUNBeUQsVUFBQUEsRUFBRSxDQUFDQyxZQUFILENBQWdCQyxnQkFBZ0IsQ0FBQ04sU0FBRCxDQUFoQyxFQUE2Q0ksRUFBRSxDQUFDRyxVQUFoRDtBQUNBMUUsVUFBQUEsVUFBVTtBQUNWeUQsVUFBQUEsU0FBUztBQUNWO0FBQ0YsT0FiRDtBQWNELEtBbkJELE1BbUJPO0FBQ0wsVUFBTWtCLFNBQVMsYUFBTVYsSUFBSSxDQUFDQyxVQUFMLENBQWdCaEMsRUFBdEIsY0FBNEIwQyxJQUFJLENBQUNDLEdBQUwsRUFBNUIsQ0FBZjtBQUNBLFVBQU1WLFNBQVMsR0FBRztBQUNoQnZDLFFBQUFBLElBQUksRUFBSkEsSUFEZ0I7QUFDVkcsUUFBQUEsTUFBTSxFQUFOQSxNQURVO0FBQ0ZDLFFBQUFBLFFBQVEsRUFBUkEsUUFERTtBQUNROEMsUUFBQUEsYUFBYSxFQUFFYixJQUFJLENBQUNDLFVBQUwsQ0FBZ0JoQztBQUR2QyxPQUFsQjtBQUdBLFVBQU1xQyxFQUFFLEdBQUdwRixRQUFRLENBQUMyQixjQUFULENBQXdCLGNBQXhCLENBQVg7QUFDQXlELE1BQUFBLEVBQUUsQ0FBQ0MsWUFBSCxDQUFnQkMsZ0JBQWdCLENBQUNOLFNBQUQsRUFBWSxJQUFaLEVBQWtCUSxTQUFsQixDQUFoQyxFQUE4REosRUFBRSxDQUFDRyxVQUFqRTs7QUFFQSxVQUFLLFlBQVlmLFNBQWIsSUFBMkIsQ0FBQ0EsU0FBUyxDQUFDb0IsTUFBMUMsRUFBa0Q7QUFDaERYLFFBQUFBLFlBQVksQ0FBQyx3REFBRCxDQUFaO0FBQ0Q7O0FBRURwRSxNQUFBQSxVQUFVO0FBQ1Z5RCxNQUFBQSxTQUFTO0FBQ1RFLE1BQUFBLFNBQVMsQ0FBQ0MsYUFBVixDQUF3QkMsVUFBeEIsQ0FBbUNtQixXQUFuQyxDQUErQztBQUM3Q0MsUUFBQUEsSUFBSSxFQUFFLGFBRHVDO0FBRTdDQyxRQUFBQSxNQUFNLEVBQUVmLFNBRnFDO0FBRzdDUSxRQUFBQSxTQUFTLEVBQVRBO0FBSDZDLE9BQS9DO0FBS0Q7QUFDRixHQXpDRCxNQXlDTztBQUFFO0FBQ1AsUUFBTVEsU0FBUyxHQUFHaEcsUUFBUSxDQUFDMkIsY0FBVCxDQUF3Qix1QkFBeEIsQ0FBbEI7QUFDQSxRQUFNc0UsU0FBUyxnQ0FBeUJ0QyxhQUFhLENBQUN1QyxJQUFkLENBQW1CLElBQW5CLENBQXpCLENBQWY7QUFDQUYsSUFBQUEsU0FBUyxDQUFDL0IsU0FBVixHQUFzQmdDLFNBQXRCO0FBQ0FELElBQUFBLFNBQVMsQ0FBQzFGLFNBQVYsQ0FBb0JDLEdBQXBCLENBQXdCLE1BQXhCO0FBQ0FQLElBQUFBLFFBQVEsQ0FBQzJCLGNBQVQsQ0FBd0JnQyxhQUFhLENBQUMsQ0FBRCxDQUFyQyxFQUEwQy9DLEtBQTFDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTdUYsUUFBVCxDQUFrQmxGLEtBQWxCLEVBQXlCO0FBQ3ZCaUUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlsRSxLQUFLLENBQUNNLE1BQU4sQ0FBYXlCLEtBQXpCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogKioqKiBtb2RhbCAqKioqKiogKi9cblxubGV0IHByZXZpb3VzbHlGb2N1c2VkRWxlbWVudDtcblxuZnVuY3Rpb24gb3Blbk1vZGFsKCkge1xuICBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm92ZXJsYXknKTtcbiAgY29uc3QgaW50ZXJhY3RpdmVFbGVtZW50cyA9IG92ZXJsYXkucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBpbnB1dCwgdGV4dGFyZWEnKTtcbiAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnaGFzLW9wZW4tbW9kYWwnKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRyYXBUYWJLZXkpO1xuICAvLyBmb2N1cyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgb3ZlcmxheS4gdGltZW91dCBpcyBuZWVkZWQgYmVjYXVzZSBvZiBDU1MgdHJhbnNpdGlvblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpbnRlcmFjdGl2ZUVsZW1lbnRzWzBdLmZvY3VzKCk7XG4gIH0sIDEwMCk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gIGNsZWFyRm9ybUVycm9ycygpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtb3Blbi1tb2RhbCcpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdHJhcFRhYktleSk7XG4gIGlmIChwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQpIHtcbiAgICBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQuZm9jdXMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFwVGFiS2V5KGV2ZW50KSB7XG4gIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpO1xuICBjb25zdCBpbnRlcmFjdGl2ZUVsZW1lbnRzID0gb3ZlcmxheS5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24sIGlucHV0Jyk7XG4gIGNvbnN0IGZpcnN0RWxlbWVudCA9IGludGVyYWN0aXZlRWxlbWVudHNbMF07XG4gIGNvbnN0IGxhc3RFbGVtZW50ID0gaW50ZXJhY3RpdmVFbGVtZW50c1tpbnRlcmFjdGl2ZUVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuICBpZiAoZXZlbnQua2V5ICYmIGV2ZW50LmtleSA9PT0gJ1RhYicpIHtcbiAgICBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQudGFyZ2V0ID09PSBmaXJzdEVsZW1lbnQpIHsgLy8gc2hpZnQgKyB0YWJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsYXN0RWxlbWVudC5mb2N1cygpO1xuICAgIH0gZWxzZSBpZiAoIWV2ZW50LnNoaWZ0S2V5ICYmIGV2ZW50LnRhcmdldCA9PT0gbGFzdEVsZW1lbnQpIHsgLy8gdGFiXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZmlyc3RFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG59XG5cbi8qKiAqKioqIGhhbmRsZSBlcnJvcnMgKioqKioqICovXG5cbmZ1bmN0aW9uIHNldE5hbWVJbnB1dEVycm9yKCkge1xuICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpO1xuICBjb25zdCBuYW1lSW5wdXRFcnJvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lLWVycm9yJyk7XG4gIG5hbWVJbnB1dC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJywgJ3RydWUnKTtcbiAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsICduYW1lLWVycm9yJyk7XG4gIG5hbWVJbnB1dEVycm9yLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOYW1lSW5wdXRFcnJvcigpIHtcbiAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKTtcbiAgY29uc3QgbmFtZUlucHV0RXJyb3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZS1lcnJvcicpO1xuICBuYW1lSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9yJyk7XG4gIG5hbWVJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpO1xuICBuYW1lSW5wdXQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG4gIG5hbWVJbnB1dEVycm9yLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbn1cblxuZnVuY3Rpb24gc2V0UmF0aW5nSW5wdXRFcnJvcigpIHtcbiAgY29uc3QgcmF0aW5nSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nJyk7XG4gIGNvbnN0IHJhdGluZ0lucHV0RXJyb3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nLWVycm9yJyk7XG4gIHJhdGluZ0lucHV0LmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICByYXRpbmdJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcsICd0cnVlJyk7XG4gIHJhdGluZ0lucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsICdyYXRpbmctZXJyb3InKTtcbiAgcmF0aW5nSW5wdXRFcnJvci5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyUmF0aW5nSW5wdXRFcnJvcigpIHtcbiAgY29uc3QgcmF0aW5nSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nJyk7XG4gIGNvbnN0IHJhdGluZ0lucHV0RXJyb3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nLWVycm9yJyk7XG4gIHJhdGluZ0lucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICByYXRpbmdJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpO1xuICByYXRpbmdJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgcmF0aW5nSW5wdXRFcnJvci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG59XG5cbmZ1bmN0aW9uIHNldENvbW1lbnRJbnB1dEVycm9yKCkge1xuICBjb25zdCBjb21tZW50SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMnKTtcbiAgY29uc3QgY29tbWVudElucHV0RXJyb3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMtZXJyb3InKTtcbiAgY29tbWVudElucHV0LmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICBjb21tZW50SW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCAndHJ1ZScpO1xuICBjb21tZW50SW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgJ2NvbW1lbnRzLWVycm9yJyk7XG4gIGNvbW1lbnRJbnB1dEVycm9yLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJDb21tZW50SW5wdXRFcnJvcigpIHtcbiAgY29uc3QgY29tbWVudElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbW1lbnRzJyk7XG4gIGNvbnN0IGNvbW1lbnRJbnB1dEVycm9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbW1lbnRzLWVycm9yJyk7XG4gIGNvbW1lbnRJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgY29tbWVudElucHV0LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyk7XG4gIGNvbW1lbnRJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgY29tbWVudElucHV0RXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xufVxuXG5jb25zdCBlcnJvckZ1bmN0aW9ucyA9IHtcbiAgbmFtZToge1xuICAgIHNldEVycm9yOiBzZXROYW1lSW5wdXRFcnJvcixcbiAgICBjbGVhckVycm9yOiBjbGVhck5hbWVJbnB1dEVycm9yLFxuICB9LFxuICByYXRpbmc6IHtcbiAgICBzZXRFcnJvcjogc2V0UmF0aW5nSW5wdXRFcnJvcixcbiAgICBjbGVhckVycm9yOiBjbGVhclJhdGluZ0lucHV0RXJyb3IsXG4gIH0sXG4gIGNvbW1lbnRzOiB7XG4gICAgc2V0RXJyb3I6IHNldENvbW1lbnRJbnB1dEVycm9yLFxuICAgIGNsZWFyRXJyb3I6IGNsZWFyQ29tbWVudElucHV0RXJyb3IsXG4gIH0sXG59O1xuXG4vKiogKioqKiB2YWxpZGF0aW9uICoqKioqKiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUlucHV0KGlkLCB2YWx1ZSkge1xuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5jbG9uZU5vZGUoKTtcbiAgbGV0IGlucHV0VmFsdWU7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaW5wdXRWYWx1ZSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGlucHV0VmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgfVxuICBpbnB1dFZhbHVlID0gaWQgPT09ICdyYXRpbmcnID8gTnVtYmVyLnBhcnNlSW50KGlucHV0VmFsdWUsIDEwKSA6IGlucHV0VmFsdWU7XG4gIGlmIChpbnB1dFZhbHVlKSB7XG4gICAgZXJyb3JGdW5jdGlvbnNbaWRdLmNsZWFyRXJyb3IoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZXJyb3JGdW5jdGlvbnNbaWRdLnNldEVycm9yKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFsbElucHV0cygpIHtcbiAgbGV0IGVycm9yID0gZmFsc2U7XG4gIGNvbnN0IGlucHV0SWRzID0gWyduYW1lJywgJ3JhdGluZycsICdjb21tZW50cyddO1xuICBjb25zdCBpbnZhbGlkSW5wdXRzID0gW107XG4gIGlucHV0SWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgY29uc3QgaW5wdXRWYWxpZCA9IHZhbGlkYXRlSW5wdXQoaWQpO1xuICAgIGlmICghaW5wdXRWYWxpZCkge1xuICAgICAgaW52YWxpZElucHV0cy5wdXNoKGlkKTtcbiAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBlcnJvciwgaW52YWxpZElucHV0cyB9O1xufVxuXG4vKiogKioqKiBoYW5kbGUgZXZlbnRzICoqKioqKiAqL1xuXG5mdW5jdGlvbiBoYW5kbGVSYW5nZUNoYW5nZShldmVudCkge1xuICBjb25zdCByYXRpbmdWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yYXRpbmctdmFsdWUnKTtcbiAgcmF0aW5nVmFsdWUuaW5uZXJIVE1MID0gYCR7ZXZlbnQudGFyZ2V0LnZhbHVlfS4wYDtcbiAgdmFsaWRhdGVJbnB1dChldmVudC50YXJnZXQubmFtZSwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlSW5wdXRLZXlVcChldmVudCkge1xuICBpZiAoIShldmVudC5rZXkgJiYgZXZlbnQua2V5ID09PSAnVGFiJykpIHtcbiAgICB2YWxpZGF0ZUlucHV0KGV2ZW50LnRhcmdldC5uYW1lLCBldmVudC50YXJnZXQudmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUlucHV0Qmx1cihldmVudCkge1xuICB2YWxpZGF0ZUlucHV0KGV2ZW50LnRhcmdldC5uYW1lLCBldmVudC50YXJnZXQudmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRGb3JtSW5wdXRWYWx1ZXMoKSB7XG4gIGNvbnN0IGlucHV0SWRzID0gWyduYW1lJywgJ3JhdGluZycsICdjb21tZW50cyddO1xuICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgaW5wdXRJZHMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICB2YWx1ZXNbaWRdID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gY2xlYXJGb3JtKCkge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlID0gJyc7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYXRpbmcnKS52YWx1ZSA9ICcwJztcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhdGluZy12YWx1ZScpLmlubmVySFRNTCA9ICcwLjAnO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMnKS52YWx1ZSA9ICcnO1xufVxuXG5mdW5jdGlvbiBjbGVhckZvcm1FcnJvcnMoKSB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lLWVycm9yJykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nLWVycm9yJykuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMtZXJyb3InKS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtcmV2aWV3LWZvcm0tZXJyb3InKS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtcmV2aWV3LWZvcm0tZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhdGluZycpLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMnKS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQWRkUmV2aWV3U3VibWl0KCkge1xuICBjb25zdCB7IGVycm9yLCBpbnZhbGlkSW5wdXRzIH0gPSB2YWxpZGF0ZUFsbElucHV0cygpO1xuICBpZiAoIWVycm9yKSB7XG4gICAgY29uc3QgeyBuYW1lLCByYXRpbmcsIGNvbW1lbnRzIH0gPSBnZXRGb3JtSW5wdXRWYWx1ZXMoKTtcbiAgICBpZiAoKCFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcikgfHwgKCFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSkge1xuICAgICAgLy8gcGVyZm9ybSByZWd1bGFyIGZldGNoIGFuZCByZWd1bGFyIHVwZGF0ZXNcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtcmV2aWV3LXN1Ym1pdCcpO1xuICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtYnVzeScsICd0cnVlJyk7XG4gICAgICBEQkhlbHBlci5hZGRSZXZpZXcoc2VsZi5yZXN0YXVyYW50LmlkLCBuYW1lLCByYXRpbmcsIGNvbW1lbnRzLCAoZXJyb3IsIG5ld1JldmlldykgPT4ge1xuICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWJ1c3knLCAnZmFsc2UnKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgZW5xdWV1ZVRvYXN0KCdBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2FpbicsICdlcnJvcicpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnF1ZXVlVG9hc3QoYCR7bmFtZX0ncyByZXZpZXcgaGFzIGJlZW4gc2F2ZWRgLCAnc3VjY2VzcycpO1xuICAgICAgICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlld3MtbGlzdCcpO1xuICAgICAgICAgIHVsLmluc2VydEJlZm9yZShjcmVhdGVSZXZpZXdIVE1MKG5ld1JldmlldyksIHVsLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIGNsb3NlTW9kYWwoKTtcbiAgICAgICAgICBjbGVhckZvcm0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGAke3NlbGYucmVzdGF1cmFudC5pZH0tJHtEYXRlLm5vdygpfWA7XG4gICAgICBjb25zdCBuZXdSZXZpZXcgPSB7XG4gICAgICAgIG5hbWUsIHJhdGluZywgY29tbWVudHMsIHJlc3RhdXJhbnRfaWQ6IHNlbGYucmVzdGF1cmFudC5pZCxcbiAgICAgIH07XG4gICAgICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzLWxpc3QnKTtcbiAgICAgIHVsLmluc2VydEJlZm9yZShjcmVhdGVSZXZpZXdIVE1MKG5ld1JldmlldywgdHJ1ZSwgcmVxdWVzdElkKSwgdWwuZmlyc3RDaGlsZCk7XG5cbiAgICAgIGlmICgoJ29uTGluZScgaW4gbmF2aWdhdG9yKSAmJiAhbmF2aWdhdG9yLm9uTGluZSkge1xuICAgICAgICBlbnF1ZXVlVG9hc3QoJ1lvdXIgcmV2aWV3IHdpbGwgYmUgc3VibWl0dGVkIHdoZW4geW91IGFyZSBiYWNrIG9ubGluZScpO1xuICAgICAgfVxuXG4gICAgICBjbG9zZU1vZGFsKCk7XG4gICAgICBjbGVhckZvcm0oKTtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAncG9zdC1yZXZpZXcnLFxuICAgICAgICByZXZpZXc6IG5ld1JldmlldyxcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgeyAvLyBmb3JtIGVycm9ycyBub3QgY2xlYXJlZFxuICAgIGNvbnN0IGZvcm1FcnJvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtcmV2aWV3LWZvcm0tZXJyb3InKTtcbiAgICBjb25zdCBlcnJvclRleHQgPSBgSW52YWxpZCBpbnB1dCBmb3I6ICR7aW52YWxpZElucHV0cy5qb2luKCcsICcpfWA7XG4gICAgZm9ybUVycm9yLmlubmVySFRNTCA9IGVycm9yVGV4dDtcbiAgICBmb3JtRXJyb3IuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGludmFsaWRJbnB1dHNbMF0pLmZvY3VzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9nRXZlbnQoZXZlbnQpIHtcbiAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LnZhbHVlKTtcbn1cbiJdLCJmaWxlIjoiYWRkUmV2aWV3TW9kYWwuanMifQ==
